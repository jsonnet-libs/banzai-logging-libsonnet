{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='clusterOutput', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of ClusterOutput', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'logging.banzaicloud.io/v1alpha1',
    kind: 'ClusterOutput',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help=''),
  spec: {
    '#awsElasticsearch':: d.obj(help=''),
    awsElasticsearch: {
      '#api_key':: d.obj(help=''),
      api_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { api_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { api_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { api_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { api_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { api_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { api_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { awsElasticsearch+: { api_key+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { awsElasticsearch+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { awsElasticsearch+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { awsElasticsearch+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { awsElasticsearch+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { awsElasticsearch+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { awsElasticsearch+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { awsElasticsearch+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { awsElasticsearch+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { awsElasticsearch+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { awsElasticsearch+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { awsElasticsearch+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { awsElasticsearch+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { awsElasticsearch+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { awsElasticsearch+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { awsElasticsearch+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { awsElasticsearch+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { awsElasticsearch+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { awsElasticsearch+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { awsElasticsearch+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { awsElasticsearch+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { awsElasticsearch+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { awsElasticsearch+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { awsElasticsearch+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { awsElasticsearch+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { awsElasticsearch+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { awsElasticsearch+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { awsElasticsearch+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { awsElasticsearch+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { awsElasticsearch+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { awsElasticsearch+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { awsElasticsearch+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { awsElasticsearch+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { awsElasticsearch+: { buffer+: { type: type } } } },
      },
      '#ca_file':: d.obj(help=''),
      ca_file: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { awsElasticsearch+: { ca_file+: { value: value } } } },
      },
      '#client_cert':: d.obj(help=''),
      client_cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { awsElasticsearch+: { client_cert+: { value: value } } } },
      },
      '#client_key':: d.obj(help=''),
      client_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { client_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { client_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { client_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { client_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { client_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { client_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { awsElasticsearch+: { client_key+: { value: value } } } },
      },
      '#client_key_pass':: d.obj(help=''),
      client_key_pass: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { awsElasticsearch+: { client_key_pass+: { value: value } } } },
      },
      '#endpoint':: d.obj(help=''),
      endpoint: {
        '#access_key_id':: d.obj(help=''),
        access_key_id: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { access_key_id+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { access_key_id+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { access_key_id+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { access_key_id+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { access_key_id+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { access_key_id+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { awsElasticsearch+: { endpoint+: { access_key_id+: { value: value } } } } },
        },
        '#assume_role_arn':: d.obj(help=''),
        assume_role_arn: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_arn+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_arn+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_arn+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_arn+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_arn+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_arn+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_arn+: { value: value } } } } },
        },
        '#assume_role_session_name':: d.obj(help=''),
        assume_role_session_name: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_session_name+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_session_name+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_session_name+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_session_name+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_session_name+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_session_name+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_session_name+: { value: value } } } } },
        },
        '#assume_role_web_identity_token_file':: d.obj(help=''),
        assume_role_web_identity_token_file: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_web_identity_token_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_web_identity_token_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_web_identity_token_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_web_identity_token_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_web_identity_token_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_web_identity_token_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { awsElasticsearch+: { endpoint+: { assume_role_web_identity_token_file+: { value: value } } } } },
        },
        '#ecs_container_credentials_relative_uri':: d.obj(help=''),
        ecs_container_credentials_relative_uri: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { ecs_container_credentials_relative_uri+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { ecs_container_credentials_relative_uri+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { ecs_container_credentials_relative_uri+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { ecs_container_credentials_relative_uri+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { ecs_container_credentials_relative_uri+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { ecs_container_credentials_relative_uri+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { awsElasticsearch+: { endpoint+: { ecs_container_credentials_relative_uri+: { value: value } } } } },
        },
        '#secret_access_key':: d.obj(help=''),
        secret_access_key: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { secret_access_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { secret_access_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { secret_access_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { secret_access_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { secret_access_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { secret_access_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { awsElasticsearch+: { endpoint+: { secret_access_key+: { value: value } } } } },
        },
        '#sts_credentials_region':: d.obj(help=''),
        sts_credentials_region: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { sts_credentials_region+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { sts_credentials_region+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { sts_credentials_region+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { awsElasticsearch+: { endpoint+: { sts_credentials_region+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { awsElasticsearch+: { endpoint+: { sts_credentials_region+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { awsElasticsearch+: { endpoint+: { sts_credentials_region+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { awsElasticsearch+: { endpoint+: { sts_credentials_region+: { value: value } } } } },
        },
        '#withRegion':: d.fn(help='', args=[d.arg(name='region', type=d.T.string)]),
        withRegion(region): { spec+: { awsElasticsearch+: { endpoint+: { region: region } } } },
        '#withUrl':: d.fn(help='', args=[d.arg(name='url', type=d.T.string)]),
        withUrl(url): { spec+: { awsElasticsearch+: { endpoint+: { url: url } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { awsElasticsearch+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { awsElasticsearch+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { awsElasticsearch+: { format+: { type: type } } } },
      },
      '#password':: d.obj(help=''),
      password: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { password+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { password+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { password+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { password+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { awsElasticsearch+: { password+: { value: value } } } },
      },
      '#template_file':: d.obj(help=''),
      template_file: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { template_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { template_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { template_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { awsElasticsearch+: { template_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { awsElasticsearch+: { template_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { awsElasticsearch+: { template_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { awsElasticsearch+: { template_file+: { value: value } } } },
      },
      '#withApplication_name':: d.fn(help='', args=[d.arg(name='application_name', type=d.T.string)]),
      withApplication_name(application_name): { spec+: { awsElasticsearch+: { application_name: application_name } } },
      '#withBulk_message_request_threshold':: d.fn(help='', args=[d.arg(name='bulk_message_request_threshold', type=d.T.string)]),
      withBulk_message_request_threshold(bulk_message_request_threshold): { spec+: { awsElasticsearch+: { bulk_message_request_threshold: bulk_message_request_threshold } } },
      '#withContent_type':: d.fn(help='', args=[d.arg(name='content_type', type=d.T.string)]),
      withContent_type(content_type): { spec+: { awsElasticsearch+: { content_type: content_type } } },
      '#withCustom_headers':: d.fn(help='', args=[d.arg(name='custom_headers', type=d.T.string)]),
      withCustom_headers(custom_headers): { spec+: { awsElasticsearch+: { custom_headers: custom_headers } } },
      '#withCustomize_template':: d.fn(help='', args=[d.arg(name='customize_template', type=d.T.string)]),
      withCustomize_template(customize_template): { spec+: { awsElasticsearch+: { customize_template: customize_template } } },
      '#withData_stream_enable':: d.fn(help='', args=[d.arg(name='data_stream_enable', type=d.T.boolean)]),
      withData_stream_enable(data_stream_enable): { spec+: { awsElasticsearch+: { data_stream_enable: data_stream_enable } } },
      '#withData_stream_ilm_name':: d.fn(help='', args=[d.arg(name='data_stream_ilm_name', type=d.T.string)]),
      withData_stream_ilm_name(data_stream_ilm_name): { spec+: { awsElasticsearch+: { data_stream_ilm_name: data_stream_ilm_name } } },
      '#withData_stream_ilm_policy':: d.fn(help='', args=[d.arg(name='data_stream_ilm_policy', type=d.T.string)]),
      withData_stream_ilm_policy(data_stream_ilm_policy): { spec+: { awsElasticsearch+: { data_stream_ilm_policy: data_stream_ilm_policy } } },
      '#withData_stream_ilm_policy_overwrite':: d.fn(help='', args=[d.arg(name='data_stream_ilm_policy_overwrite', type=d.T.boolean)]),
      withData_stream_ilm_policy_overwrite(data_stream_ilm_policy_overwrite): { spec+: { awsElasticsearch+: { data_stream_ilm_policy_overwrite: data_stream_ilm_policy_overwrite } } },
      '#withData_stream_name':: d.fn(help='', args=[d.arg(name='data_stream_name', type=d.T.string)]),
      withData_stream_name(data_stream_name): { spec+: { awsElasticsearch+: { data_stream_name: data_stream_name } } },
      '#withData_stream_template_name':: d.fn(help='', args=[d.arg(name='data_stream_template_name', type=d.T.string)]),
      withData_stream_template_name(data_stream_template_name): { spec+: { awsElasticsearch+: { data_stream_template_name: data_stream_template_name } } },
      '#withDefault_elasticsearch_version':: d.fn(help='', args=[d.arg(name='default_elasticsearch_version', type=d.T.string)]),
      withDefault_elasticsearch_version(default_elasticsearch_version): { spec+: { awsElasticsearch+: { default_elasticsearch_version: default_elasticsearch_version } } },
      '#withDeflector_alias':: d.fn(help='', args=[d.arg(name='deflector_alias', type=d.T.string)]),
      withDeflector_alias(deflector_alias): { spec+: { awsElasticsearch+: { deflector_alias: deflector_alias } } },
      '#withEnable_ilm':: d.fn(help='', args=[d.arg(name='enable_ilm', type=d.T.boolean)]),
      withEnable_ilm(enable_ilm): { spec+: { awsElasticsearch+: { enable_ilm: enable_ilm } } },
      '#withException_backup':: d.fn(help='', args=[d.arg(name='exception_backup', type=d.T.boolean)]),
      withException_backup(exception_backup): { spec+: { awsElasticsearch+: { exception_backup: exception_backup } } },
      '#withFail_on_detecting_es_version_retry_exceed':: d.fn(help='', args=[d.arg(name='fail_on_detecting_es_version_retry_exceed', type=d.T.boolean)]),
      withFail_on_detecting_es_version_retry_exceed(fail_on_detecting_es_version_retry_exceed): { spec+: { awsElasticsearch+: { fail_on_detecting_es_version_retry_exceed: fail_on_detecting_es_version_retry_exceed } } },
      '#withFail_on_putting_template_retry_exceed':: d.fn(help='', args=[d.arg(name='fail_on_putting_template_retry_exceed', type=d.T.boolean)]),
      withFail_on_putting_template_retry_exceed(fail_on_putting_template_retry_exceed): { spec+: { awsElasticsearch+: { fail_on_putting_template_retry_exceed: fail_on_putting_template_retry_exceed } } },
      '#withFlatten_hashes':: d.fn(help='', args=[d.arg(name='flatten_hashes', type=d.T.boolean)]),
      withFlatten_hashes(flatten_hashes): { spec+: { awsElasticsearch+: { flatten_hashes: flatten_hashes } } },
      '#withFlatten_hashes_separator':: d.fn(help='', args=[d.arg(name='flatten_hashes_separator', type=d.T.string)]),
      withFlatten_hashes_separator(flatten_hashes_separator): { spec+: { awsElasticsearch+: { flatten_hashes_separator: flatten_hashes_separator } } },
      '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
      withFlush_interval(flush_interval): { spec+: { awsElasticsearch+: { flush_interval: flush_interval } } },
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { awsElasticsearch+: { host: host } } },
      '#withHosts':: d.fn(help='', args=[d.arg(name='hosts', type=d.T.string)]),
      withHosts(hosts): { spec+: { awsElasticsearch+: { hosts: hosts } } },
      '#withHttp_backend':: d.fn(help='', args=[d.arg(name='http_backend', type=d.T.string)]),
      withHttp_backend(http_backend): { spec+: { awsElasticsearch+: { http_backend: http_backend } } },
      '#withId_key':: d.fn(help='', args=[d.arg(name='id_key', type=d.T.string)]),
      withId_key(id_key): { spec+: { awsElasticsearch+: { id_key: id_key } } },
      '#withIgnore_exceptions':: d.fn(help='', args=[d.arg(name='ignore_exceptions', type=d.T.string)]),
      withIgnore_exceptions(ignore_exceptions): { spec+: { awsElasticsearch+: { ignore_exceptions: ignore_exceptions } } },
      '#withIlm_policy':: d.fn(help='', args=[d.arg(name='ilm_policy', type=d.T.string)]),
      withIlm_policy(ilm_policy): { spec+: { awsElasticsearch+: { ilm_policy: ilm_policy } } },
      '#withIlm_policy_id':: d.fn(help='', args=[d.arg(name='ilm_policy_id', type=d.T.string)]),
      withIlm_policy_id(ilm_policy_id): { spec+: { awsElasticsearch+: { ilm_policy_id: ilm_policy_id } } },
      '#withIlm_policy_overwrite':: d.fn(help='', args=[d.arg(name='ilm_policy_overwrite', type=d.T.boolean)]),
      withIlm_policy_overwrite(ilm_policy_overwrite): { spec+: { awsElasticsearch+: { ilm_policy_overwrite: ilm_policy_overwrite } } },
      '#withInclude_index_in_url':: d.fn(help='', args=[d.arg(name='include_index_in_url', type=d.T.boolean)]),
      withInclude_index_in_url(include_index_in_url): { spec+: { awsElasticsearch+: { include_index_in_url: include_index_in_url } } },
      '#withInclude_tag_key':: d.fn(help='', args=[d.arg(name='include_tag_key', type=d.T.boolean)]),
      withInclude_tag_key(include_tag_key): { spec+: { awsElasticsearch+: { include_tag_key: include_tag_key } } },
      '#withInclude_timestamp':: d.fn(help='', args=[d.arg(name='include_timestamp', type=d.T.boolean)]),
      withInclude_timestamp(include_timestamp): { spec+: { awsElasticsearch+: { include_timestamp: include_timestamp } } },
      '#withIndex_date_pattern':: d.fn(help='', args=[d.arg(name='index_date_pattern', type=d.T.string)]),
      withIndex_date_pattern(index_date_pattern): { spec+: { awsElasticsearch+: { index_date_pattern: index_date_pattern } } },
      '#withIndex_name':: d.fn(help='', args=[d.arg(name='index_name', type=d.T.string)]),
      withIndex_name(index_name): { spec+: { awsElasticsearch+: { index_name: index_name } } },
      '#withIndex_prefix':: d.fn(help='', args=[d.arg(name='index_prefix', type=d.T.string)]),
      withIndex_prefix(index_prefix): { spec+: { awsElasticsearch+: { index_prefix: index_prefix } } },
      '#withLog_es_400_reason':: d.fn(help='', args=[d.arg(name='log_es_400_reason', type=d.T.boolean)]),
      withLog_es_400_reason(log_es_400_reason): { spec+: { awsElasticsearch+: { log_es_400_reason: log_es_400_reason } } },
      '#withLogstash_dateformat':: d.fn(help='', args=[d.arg(name='logstash_dateformat', type=d.T.string)]),
      withLogstash_dateformat(logstash_dateformat): { spec+: { awsElasticsearch+: { logstash_dateformat: logstash_dateformat } } },
      '#withLogstash_format':: d.fn(help='', args=[d.arg(name='logstash_format', type=d.T.boolean)]),
      withLogstash_format(logstash_format): { spec+: { awsElasticsearch+: { logstash_format: logstash_format } } },
      '#withLogstash_prefix':: d.fn(help='', args=[d.arg(name='logstash_prefix', type=d.T.string)]),
      withLogstash_prefix(logstash_prefix): { spec+: { awsElasticsearch+: { logstash_prefix: logstash_prefix } } },
      '#withLogstash_prefix_separator':: d.fn(help='', args=[d.arg(name='logstash_prefix_separator', type=d.T.string)]),
      withLogstash_prefix_separator(logstash_prefix_separator): { spec+: { awsElasticsearch+: { logstash_prefix_separator: logstash_prefix_separator } } },
      '#withMax_retry_get_es_version':: d.fn(help='', args=[d.arg(name='max_retry_get_es_version', type=d.T.string)]),
      withMax_retry_get_es_version(max_retry_get_es_version): { spec+: { awsElasticsearch+: { max_retry_get_es_version: max_retry_get_es_version } } },
      '#withMax_retry_putting_template':: d.fn(help='', args=[d.arg(name='max_retry_putting_template', type=d.T.string)]),
      withMax_retry_putting_template(max_retry_putting_template): { spec+: { awsElasticsearch+: { max_retry_putting_template: max_retry_putting_template } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { awsElasticsearch+: { path: path } } },
      '#withPipeline':: d.fn(help='', args=[d.arg(name='pipeline', type=d.T.string)]),
      withPipeline(pipeline): { spec+: { awsElasticsearch+: { pipeline: pipeline } } },
      '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { awsElasticsearch+: { port: port } } },
      '#withPrefer_oj_serializer':: d.fn(help='', args=[d.arg(name='prefer_oj_serializer', type=d.T.boolean)]),
      withPrefer_oj_serializer(prefer_oj_serializer): { spec+: { awsElasticsearch+: { prefer_oj_serializer: prefer_oj_serializer } } },
      '#withReconnect_on_error':: d.fn(help='', args=[d.arg(name='reconnect_on_error', type=d.T.boolean)]),
      withReconnect_on_error(reconnect_on_error): { spec+: { awsElasticsearch+: { reconnect_on_error: reconnect_on_error } } },
      '#withReload_after':: d.fn(help='', args=[d.arg(name='reload_after', type=d.T.string)]),
      withReload_after(reload_after): { spec+: { awsElasticsearch+: { reload_after: reload_after } } },
      '#withReload_connections':: d.fn(help='', args=[d.arg(name='reload_connections', type=d.T.boolean)]),
      withReload_connections(reload_connections): { spec+: { awsElasticsearch+: { reload_connections: reload_connections } } },
      '#withReload_on_failure':: d.fn(help='', args=[d.arg(name='reload_on_failure', type=d.T.boolean)]),
      withReload_on_failure(reload_on_failure): { spec+: { awsElasticsearch+: { reload_on_failure: reload_on_failure } } },
      '#withRemove_keys':: d.fn(help='', args=[d.arg(name='remove_keys', type=d.T.string)]),
      withRemove_keys(remove_keys): { spec+: { awsElasticsearch+: { remove_keys: remove_keys } } },
      '#withRemove_keys_on_update':: d.fn(help='', args=[d.arg(name='remove_keys_on_update', type=d.T.string)]),
      withRemove_keys_on_update(remove_keys_on_update): { spec+: { awsElasticsearch+: { remove_keys_on_update: remove_keys_on_update } } },
      '#withRemove_keys_on_update_key':: d.fn(help='', args=[d.arg(name='remove_keys_on_update_key', type=d.T.string)]),
      withRemove_keys_on_update_key(remove_keys_on_update_key): { spec+: { awsElasticsearch+: { remove_keys_on_update_key: remove_keys_on_update_key } } },
      '#withRequest_timeout':: d.fn(help='', args=[d.arg(name='request_timeout', type=d.T.string)]),
      withRequest_timeout(request_timeout): { spec+: { awsElasticsearch+: { request_timeout: request_timeout } } },
      '#withResurrect_after':: d.fn(help='', args=[d.arg(name='resurrect_after', type=d.T.string)]),
      withResurrect_after(resurrect_after): { spec+: { awsElasticsearch+: { resurrect_after: resurrect_after } } },
      '#withRetry_tag':: d.fn(help='', args=[d.arg(name='retry_tag', type=d.T.string)]),
      withRetry_tag(retry_tag): { spec+: { awsElasticsearch+: { retry_tag: retry_tag } } },
      '#withRollover_index':: d.fn(help='', args=[d.arg(name='rollover_index', type=d.T.boolean)]),
      withRollover_index(rollover_index): { spec+: { awsElasticsearch+: { rollover_index: rollover_index } } },
      '#withRouting_key':: d.fn(help='', args=[d.arg(name='routing_key', type=d.T.string)]),
      withRouting_key(routing_key): { spec+: { awsElasticsearch+: { routing_key: routing_key } } },
      '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
      withScheme(scheme): { spec+: { awsElasticsearch+: { scheme: scheme } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { awsElasticsearch+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSniffer_class_name':: d.fn(help='', args=[d.arg(name='sniffer_class_name', type=d.T.string)]),
      withSniffer_class_name(sniffer_class_name): { spec+: { awsElasticsearch+: { sniffer_class_name: sniffer_class_name } } },
      '#withSsl_max_version':: d.fn(help='', args=[d.arg(name='ssl_max_version', type=d.T.string)]),
      withSsl_max_version(ssl_max_version): { spec+: { awsElasticsearch+: { ssl_max_version: ssl_max_version } } },
      '#withSsl_min_version':: d.fn(help='', args=[d.arg(name='ssl_min_version', type=d.T.string)]),
      withSsl_min_version(ssl_min_version): { spec+: { awsElasticsearch+: { ssl_min_version: ssl_min_version } } },
      '#withSsl_verify':: d.fn(help='', args=[d.arg(name='ssl_verify', type=d.T.boolean)]),
      withSsl_verify(ssl_verify): { spec+: { awsElasticsearch+: { ssl_verify: ssl_verify } } },
      '#withSsl_version':: d.fn(help='', args=[d.arg(name='ssl_version', type=d.T.string)]),
      withSsl_version(ssl_version): { spec+: { awsElasticsearch+: { ssl_version: ssl_version } } },
      '#withSuppress_doc_wrap':: d.fn(help='', args=[d.arg(name='suppress_doc_wrap', type=d.T.boolean)]),
      withSuppress_doc_wrap(suppress_doc_wrap): { spec+: { awsElasticsearch+: { suppress_doc_wrap: suppress_doc_wrap } } },
      '#withSuppress_type_name':: d.fn(help='', args=[d.arg(name='suppress_type_name', type=d.T.boolean)]),
      withSuppress_type_name(suppress_type_name): { spec+: { awsElasticsearch+: { suppress_type_name: suppress_type_name } } },
      '#withTag_key':: d.fn(help='', args=[d.arg(name='tag_key', type=d.T.string)]),
      withTag_key(tag_key): { spec+: { awsElasticsearch+: { tag_key: tag_key } } },
      '#withTarget_index_key':: d.fn(help='', args=[d.arg(name='target_index_key', type=d.T.string)]),
      withTarget_index_key(target_index_key): { spec+: { awsElasticsearch+: { target_index_key: target_index_key } } },
      '#withTarget_type_key':: d.fn(help='', args=[d.arg(name='target_type_key', type=d.T.string)]),
      withTarget_type_key(target_type_key): { spec+: { awsElasticsearch+: { target_type_key: target_type_key } } },
      '#withTemplate_name':: d.fn(help='', args=[d.arg(name='template_name', type=d.T.string)]),
      withTemplate_name(template_name): { spec+: { awsElasticsearch+: { template_name: template_name } } },
      '#withTemplate_overwrite':: d.fn(help='', args=[d.arg(name='template_overwrite', type=d.T.boolean)]),
      withTemplate_overwrite(template_overwrite): { spec+: { awsElasticsearch+: { template_overwrite: template_overwrite } } },
      '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.string)]),
      withTemplates(templates): { spec+: { awsElasticsearch+: { templates: templates } } },
      '#withTime_key':: d.fn(help='', args=[d.arg(name='time_key', type=d.T.string)]),
      withTime_key(time_key): { spec+: { awsElasticsearch+: { time_key: time_key } } },
      '#withTime_key_format':: d.fn(help='', args=[d.arg(name='time_key_format', type=d.T.string)]),
      withTime_key_format(time_key_format): { spec+: { awsElasticsearch+: { time_key_format: time_key_format } } },
      '#withTime_parse_error_tag':: d.fn(help='', args=[d.arg(name='time_parse_error_tag', type=d.T.string)]),
      withTime_parse_error_tag(time_parse_error_tag): { spec+: { awsElasticsearch+: { time_parse_error_tag: time_parse_error_tag } } },
      '#withTime_precision':: d.fn(help='', args=[d.arg(name='time_precision', type=d.T.string)]),
      withTime_precision(time_precision): { spec+: { awsElasticsearch+: { time_precision: time_precision } } },
      '#withType_name':: d.fn(help='', args=[d.arg(name='type_name', type=d.T.string)]),
      withType_name(type_name): { spec+: { awsElasticsearch+: { type_name: type_name } } },
      '#withUnrecoverable_error_types':: d.fn(help='', args=[d.arg(name='unrecoverable_error_types', type=d.T.string)]),
      withUnrecoverable_error_types(unrecoverable_error_types): { spec+: { awsElasticsearch+: { unrecoverable_error_types: unrecoverable_error_types } } },
      '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
      withUser(user): { spec+: { awsElasticsearch+: { user: user } } },
      '#withUtc_index':: d.fn(help='', args=[d.arg(name='utc_index', type=d.T.boolean)]),
      withUtc_index(utc_index): { spec+: { awsElasticsearch+: { utc_index: utc_index } } },
      '#withValidate_client_version':: d.fn(help='', args=[d.arg(name='validate_client_version', type=d.T.boolean)]),
      withValidate_client_version(validate_client_version): { spec+: { awsElasticsearch+: { validate_client_version: validate_client_version } } },
      '#withVerify_es_version_at_startup':: d.fn(help='', args=[d.arg(name='verify_es_version_at_startup', type=d.T.boolean)]),
      withVerify_es_version_at_startup(verify_es_version_at_startup): { spec+: { awsElasticsearch+: { verify_es_version_at_startup: verify_es_version_at_startup } } },
      '#withWith_transporter_log':: d.fn(help='', args=[d.arg(name='with_transporter_log', type=d.T.boolean)]),
      withWith_transporter_log(with_transporter_log): { spec+: { awsElasticsearch+: { with_transporter_log: with_transporter_log } } },
      '#withWrite_operation':: d.fn(help='', args=[d.arg(name='write_operation', type=d.T.string)]),
      withWrite_operation(write_operation): { spec+: { awsElasticsearch+: { write_operation: write_operation } } },
    },
    '#azurestorage':: d.obj(help=''),
    azurestorage: {
      '#azure_storage_access_key':: d.obj(help=''),
      azure_storage_access_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { azurestorage+: { azure_storage_access_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { azurestorage+: { azure_storage_access_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { azurestorage+: { azure_storage_access_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { azurestorage+: { azure_storage_access_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { azurestorage+: { azure_storage_access_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { azurestorage+: { azure_storage_access_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { azurestorage+: { azure_storage_access_key+: { value: value } } } },
      },
      '#azure_storage_account':: d.obj(help=''),
      azure_storage_account: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { azurestorage+: { azure_storage_account+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { azurestorage+: { azure_storage_account+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { azurestorage+: { azure_storage_account+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { azurestorage+: { azure_storage_account+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { azurestorage+: { azure_storage_account+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { azurestorage+: { azure_storage_account+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { azurestorage+: { azure_storage_account+: { value: value } } } },
      },
      '#azure_storage_sas_token':: d.obj(help=''),
      azure_storage_sas_token: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { azurestorage+: { azure_storage_sas_token+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { azurestorage+: { azure_storage_sas_token+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { azurestorage+: { azure_storage_sas_token+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { azurestorage+: { azure_storage_sas_token+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { azurestorage+: { azure_storage_sas_token+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { azurestorage+: { azure_storage_sas_token+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { azurestorage+: { azure_storage_sas_token+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { azurestorage+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { azurestorage+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { azurestorage+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { azurestorage+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { azurestorage+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { azurestorage+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { azurestorage+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { azurestorage+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { azurestorage+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { azurestorage+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { azurestorage+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { azurestorage+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { azurestorage+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { azurestorage+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { azurestorage+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { azurestorage+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { azurestorage+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { azurestorage+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { azurestorage+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { azurestorage+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { azurestorage+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { azurestorage+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { azurestorage+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { azurestorage+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { azurestorage+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { azurestorage+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { azurestorage+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { azurestorage+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { azurestorage+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { azurestorage+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { azurestorage+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { azurestorage+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { azurestorage+: { buffer+: { type: type } } } },
      },
      '#withAuto_create_container':: d.fn(help='', args=[d.arg(name='auto_create_container', type=d.T.boolean)]),
      withAuto_create_container(auto_create_container): { spec+: { azurestorage+: { auto_create_container: auto_create_container } } },
      '#withAzure_container':: d.fn(help='', args=[d.arg(name='azure_container', type=d.T.string)]),
      withAzure_container(azure_container): { spec+: { azurestorage+: { azure_container: azure_container } } },
      '#withAzure_imds_api_version':: d.fn(help='', args=[d.arg(name='azure_imds_api_version', type=d.T.string)]),
      withAzure_imds_api_version(azure_imds_api_version): { spec+: { azurestorage+: { azure_imds_api_version: azure_imds_api_version } } },
      '#withAzure_object_key_format':: d.fn(help='', args=[d.arg(name='azure_object_key_format', type=d.T.string)]),
      withAzure_object_key_format(azure_object_key_format): { spec+: { azurestorage+: { azure_object_key_format: azure_object_key_format } } },
      '#withFormat':: d.fn(help='', args=[d.arg(name='format', type=d.T.string)]),
      withFormat(format): { spec+: { azurestorage+: { format: format } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { azurestorage+: { path: path } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { azurestorage+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
    },
    '#cloudwatch':: d.obj(help=''),
    cloudwatch: {
      '#aws_key_id':: d.obj(help=''),
      aws_key_id: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { cloudwatch+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { cloudwatch+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { cloudwatch+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { cloudwatch+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { cloudwatch+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { cloudwatch+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { cloudwatch+: { aws_key_id+: { value: value } } } },
      },
      '#aws_sec_key':: d.obj(help=''),
      aws_sec_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { cloudwatch+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { cloudwatch+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { cloudwatch+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { cloudwatch+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { cloudwatch+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { cloudwatch+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { cloudwatch+: { aws_sec_key+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { cloudwatch+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { cloudwatch+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { cloudwatch+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { cloudwatch+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { cloudwatch+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { cloudwatch+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { cloudwatch+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { cloudwatch+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { cloudwatch+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { cloudwatch+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { cloudwatch+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { cloudwatch+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { cloudwatch+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { cloudwatch+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { cloudwatch+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { cloudwatch+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { cloudwatch+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { cloudwatch+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { cloudwatch+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { cloudwatch+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { cloudwatch+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { cloudwatch+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { cloudwatch+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { cloudwatch+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { cloudwatch+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { cloudwatch+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { cloudwatch+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { cloudwatch+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { cloudwatch+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { cloudwatch+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { cloudwatch+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { cloudwatch+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { cloudwatch+: { buffer+: { type: type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { cloudwatch+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { cloudwatch+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { cloudwatch+: { format+: { type: type } } } },
      },
      '#withAuto_create_stream':: d.fn(help='', args=[d.arg(name='auto_create_stream', type=d.T.boolean)]),
      withAuto_create_stream(auto_create_stream): { spec+: { cloudwatch+: { auto_create_stream: auto_create_stream } } },
      '#withAws_instance_profile_credentials_retries':: d.fn(help='', args=[d.arg(name='aws_instance_profile_credentials_retries', type=d.T.integer)]),
      withAws_instance_profile_credentials_retries(aws_instance_profile_credentials_retries): { spec+: { cloudwatch+: { aws_instance_profile_credentials_retries: aws_instance_profile_credentials_retries } } },
      '#withAws_sts_role_arn':: d.fn(help='', args=[d.arg(name='aws_sts_role_arn', type=d.T.string)]),
      withAws_sts_role_arn(aws_sts_role_arn): { spec+: { cloudwatch+: { aws_sts_role_arn: aws_sts_role_arn } } },
      '#withAws_sts_session_name':: d.fn(help='', args=[d.arg(name='aws_sts_session_name', type=d.T.string)]),
      withAws_sts_session_name(aws_sts_session_name): { spec+: { cloudwatch+: { aws_sts_session_name: aws_sts_session_name } } },
      '#withAws_use_sts':: d.fn(help='', args=[d.arg(name='aws_use_sts', type=d.T.boolean)]),
      withAws_use_sts(aws_use_sts): { spec+: { cloudwatch+: { aws_use_sts: aws_use_sts } } },
      '#withConcurrency':: d.fn(help='', args=[d.arg(name='concurrency', type=d.T.integer)]),
      withConcurrency(concurrency): { spec+: { cloudwatch+: { concurrency: concurrency } } },
      '#withEndpoint':: d.fn(help='', args=[d.arg(name='endpoint', type=d.T.string)]),
      withEndpoint(endpoint): { spec+: { cloudwatch+: { endpoint: endpoint } } },
      '#withHttp_proxy':: d.fn(help='', args=[d.arg(name='http_proxy', type=d.T.string)]),
      withHttp_proxy(http_proxy): { spec+: { cloudwatch+: { http_proxy: http_proxy } } },
      '#withInclude_time_key':: d.fn(help='', args=[d.arg(name='include_time_key', type=d.T.boolean)]),
      withInclude_time_key(include_time_key): { spec+: { cloudwatch+: { include_time_key: include_time_key } } },
      '#withJson_handler':: d.fn(help='', args=[d.arg(name='json_handler', type=d.T.string)]),
      withJson_handler(json_handler): { spec+: { cloudwatch+: { json_handler: json_handler } } },
      '#withLocaltime':: d.fn(help='', args=[d.arg(name='localtime', type=d.T.boolean)]),
      withLocaltime(localtime): { spec+: { cloudwatch+: { localtime: localtime } } },
      '#withLog_group_aws_tags':: d.fn(help='', args=[d.arg(name='log_group_aws_tags', type=d.T.string)]),
      withLog_group_aws_tags(log_group_aws_tags): { spec+: { cloudwatch+: { log_group_aws_tags: log_group_aws_tags } } },
      '#withLog_group_aws_tags_key':: d.fn(help='', args=[d.arg(name='log_group_aws_tags_key', type=d.T.string)]),
      withLog_group_aws_tags_key(log_group_aws_tags_key): { spec+: { cloudwatch+: { log_group_aws_tags_key: log_group_aws_tags_key } } },
      '#withLog_group_name':: d.fn(help='', args=[d.arg(name='log_group_name', type=d.T.string)]),
      withLog_group_name(log_group_name): { spec+: { cloudwatch+: { log_group_name: log_group_name } } },
      '#withLog_group_name_key':: d.fn(help='', args=[d.arg(name='log_group_name_key', type=d.T.string)]),
      withLog_group_name_key(log_group_name_key): { spec+: { cloudwatch+: { log_group_name_key: log_group_name_key } } },
      '#withLog_rejected_request':: d.fn(help='', args=[d.arg(name='log_rejected_request', type=d.T.string)]),
      withLog_rejected_request(log_rejected_request): { spec+: { cloudwatch+: { log_rejected_request: log_rejected_request } } },
      '#withLog_stream_name':: d.fn(help='', args=[d.arg(name='log_stream_name', type=d.T.string)]),
      withLog_stream_name(log_stream_name): { spec+: { cloudwatch+: { log_stream_name: log_stream_name } } },
      '#withLog_stream_name_key':: d.fn(help='', args=[d.arg(name='log_stream_name_key', type=d.T.string)]),
      withLog_stream_name_key(log_stream_name_key): { spec+: { cloudwatch+: { log_stream_name_key: log_stream_name_key } } },
      '#withMax_events_per_batch':: d.fn(help='', args=[d.arg(name='max_events_per_batch', type=d.T.integer)]),
      withMax_events_per_batch(max_events_per_batch): { spec+: { cloudwatch+: { max_events_per_batch: max_events_per_batch } } },
      '#withMax_message_length':: d.fn(help='', args=[d.arg(name='max_message_length', type=d.T.integer)]),
      withMax_message_length(max_message_length): { spec+: { cloudwatch+: { max_message_length: max_message_length } } },
      '#withMessage_keys':: d.fn(help='', args=[d.arg(name='message_keys', type=d.T.string)]),
      withMessage_keys(message_keys): { spec+: { cloudwatch+: { message_keys: message_keys } } },
      '#withPut_log_events_disable_retry_limit':: d.fn(help='', args=[d.arg(name='put_log_events_disable_retry_limit', type=d.T.boolean)]),
      withPut_log_events_disable_retry_limit(put_log_events_disable_retry_limit): { spec+: { cloudwatch+: { put_log_events_disable_retry_limit: put_log_events_disable_retry_limit } } },
      '#withPut_log_events_retry_limit':: d.fn(help='', args=[d.arg(name='put_log_events_retry_limit', type=d.T.integer)]),
      withPut_log_events_retry_limit(put_log_events_retry_limit): { spec+: { cloudwatch+: { put_log_events_retry_limit: put_log_events_retry_limit } } },
      '#withPut_log_events_retry_wait':: d.fn(help='', args=[d.arg(name='put_log_events_retry_wait', type=d.T.string)]),
      withPut_log_events_retry_wait(put_log_events_retry_wait): { spec+: { cloudwatch+: { put_log_events_retry_wait: put_log_events_retry_wait } } },
      '#withRegion':: d.fn(help='', args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { spec+: { cloudwatch+: { region: region } } },
      '#withRemove_log_group_aws_tags_key':: d.fn(help='', args=[d.arg(name='remove_log_group_aws_tags_key', type=d.T.string)]),
      withRemove_log_group_aws_tags_key(remove_log_group_aws_tags_key): { spec+: { cloudwatch+: { remove_log_group_aws_tags_key: remove_log_group_aws_tags_key } } },
      '#withRemove_log_group_name_key':: d.fn(help='', args=[d.arg(name='remove_log_group_name_key', type=d.T.string)]),
      withRemove_log_group_name_key(remove_log_group_name_key): { spec+: { cloudwatch+: { remove_log_group_name_key: remove_log_group_name_key } } },
      '#withRemove_log_stream_name_key':: d.fn(help='', args=[d.arg(name='remove_log_stream_name_key', type=d.T.string)]),
      withRemove_log_stream_name_key(remove_log_stream_name_key): { spec+: { cloudwatch+: { remove_log_stream_name_key: remove_log_stream_name_key } } },
      '#withRemove_retention_in_days':: d.fn(help='', args=[d.arg(name='remove_retention_in_days', type=d.T.string)]),
      withRemove_retention_in_days(remove_retention_in_days): { spec+: { cloudwatch+: { remove_retention_in_days: remove_retention_in_days } } },
      '#withRetention_in_days':: d.fn(help='', args=[d.arg(name='retention_in_days', type=d.T.string)]),
      withRetention_in_days(retention_in_days): { spec+: { cloudwatch+: { retention_in_days: retention_in_days } } },
      '#withRetention_in_days_key':: d.fn(help='', args=[d.arg(name='retention_in_days_key', type=d.T.string)]),
      withRetention_in_days_key(retention_in_days_key): { spec+: { cloudwatch+: { retention_in_days_key: retention_in_days_key } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { cloudwatch+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withUse_tag_as_group':: d.fn(help='', args=[d.arg(name='use_tag_as_group', type=d.T.boolean)]),
      withUse_tag_as_group(use_tag_as_group): { spec+: { cloudwatch+: { use_tag_as_group: use_tag_as_group } } },
      '#withUse_tag_as_stream':: d.fn(help='', args=[d.arg(name='use_tag_as_stream', type=d.T.boolean)]),
      withUse_tag_as_stream(use_tag_as_stream): { spec+: { cloudwatch+: { use_tag_as_stream: use_tag_as_stream } } },
    },
    '#datadog':: d.obj(help=''),
    datadog: {
      '#api_key':: d.obj(help=''),
      api_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { datadog+: { api_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { datadog+: { api_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { datadog+: { api_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { datadog+: { api_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { datadog+: { api_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { datadog+: { api_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { datadog+: { api_key+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { datadog+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { datadog+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { datadog+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { datadog+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { datadog+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { datadog+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { datadog+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { datadog+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { datadog+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { datadog+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { datadog+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { datadog+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { datadog+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { datadog+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { datadog+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { datadog+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { datadog+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { datadog+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { datadog+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { datadog+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { datadog+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { datadog+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { datadog+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { datadog+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { datadog+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { datadog+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { datadog+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { datadog+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { datadog+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { datadog+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { datadog+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { datadog+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { datadog+: { buffer+: { type: type } } } },
      },
      '#withCompression_level':: d.fn(help='', args=[d.arg(name='compression_level', type=d.T.string)]),
      withCompression_level(compression_level): { spec+: { datadog+: { compression_level: compression_level } } },
      '#withDd_hostname':: d.fn(help='', args=[d.arg(name='dd_hostname', type=d.T.string)]),
      withDd_hostname(dd_hostname): { spec+: { datadog+: { dd_hostname: dd_hostname } } },
      '#withDd_source':: d.fn(help='', args=[d.arg(name='dd_source', type=d.T.string)]),
      withDd_source(dd_source): { spec+: { datadog+: { dd_source: dd_source } } },
      '#withDd_sourcecategory':: d.fn(help='', args=[d.arg(name='dd_sourcecategory', type=d.T.string)]),
      withDd_sourcecategory(dd_sourcecategory): { spec+: { datadog+: { dd_sourcecategory: dd_sourcecategory } } },
      '#withDd_tags':: d.fn(help='', args=[d.arg(name='dd_tags', type=d.T.string)]),
      withDd_tags(dd_tags): { spec+: { datadog+: { dd_tags: dd_tags } } },
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { datadog+: { host: host } } },
      '#withInclude_tag_key':: d.fn(help='', args=[d.arg(name='include_tag_key', type=d.T.boolean)]),
      withInclude_tag_key(include_tag_key): { spec+: { datadog+: { include_tag_key: include_tag_key } } },
      '#withMax_backoff':: d.fn(help='', args=[d.arg(name='max_backoff', type=d.T.string)]),
      withMax_backoff(max_backoff): { spec+: { datadog+: { max_backoff: max_backoff } } },
      '#withMax_retries':: d.fn(help='', args=[d.arg(name='max_retries', type=d.T.string)]),
      withMax_retries(max_retries): { spec+: { datadog+: { max_retries: max_retries } } },
      '#withNo_ssl_validation':: d.fn(help='', args=[d.arg(name='no_ssl_validation', type=d.T.boolean)]),
      withNo_ssl_validation(no_ssl_validation): { spec+: { datadog+: { no_ssl_validation: no_ssl_validation } } },
      '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.string)]),
      withPort(port): { spec+: { datadog+: { port: port } } },
      '#withService':: d.fn(help='', args=[d.arg(name='service', type=d.T.string)]),
      withService(service): { spec+: { datadog+: { service: service } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { datadog+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSsl_port':: d.fn(help='', args=[d.arg(name='ssl_port', type=d.T.string)]),
      withSsl_port(ssl_port): { spec+: { datadog+: { ssl_port: ssl_port } } },
      '#withTag_key':: d.fn(help='', args=[d.arg(name='tag_key', type=d.T.string)]),
      withTag_key(tag_key): { spec+: { datadog+: { tag_key: tag_key } } },
      '#withTimestamp_key':: d.fn(help='', args=[d.arg(name='timestamp_key', type=d.T.string)]),
      withTimestamp_key(timestamp_key): { spec+: { datadog+: { timestamp_key: timestamp_key } } },
      '#withUse_compression':: d.fn(help='', args=[d.arg(name='use_compression', type=d.T.boolean)]),
      withUse_compression(use_compression): { spec+: { datadog+: { use_compression: use_compression } } },
      '#withUse_http':: d.fn(help='', args=[d.arg(name='use_http', type=d.T.boolean)]),
      withUse_http(use_http): { spec+: { datadog+: { use_http: use_http } } },
      '#withUse_json':: d.fn(help='', args=[d.arg(name='use_json', type=d.T.boolean)]),
      withUse_json(use_json): { spec+: { datadog+: { use_json: use_json } } },
      '#withUse_ssl':: d.fn(help='', args=[d.arg(name='use_ssl', type=d.T.boolean)]),
      withUse_ssl(use_ssl): { spec+: { datadog+: { use_ssl: use_ssl } } },
    },
    '#elasticsearch':: d.obj(help=''),
    elasticsearch: {
      '#api_key':: d.obj(help=''),
      api_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { api_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { api_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { api_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { api_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { api_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { api_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { elasticsearch+: { api_key+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { elasticsearch+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { elasticsearch+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { elasticsearch+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { elasticsearch+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { elasticsearch+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { elasticsearch+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { elasticsearch+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { elasticsearch+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { elasticsearch+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { elasticsearch+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { elasticsearch+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { elasticsearch+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { elasticsearch+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { elasticsearch+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { elasticsearch+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { elasticsearch+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { elasticsearch+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { elasticsearch+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { elasticsearch+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { elasticsearch+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { elasticsearch+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { elasticsearch+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { elasticsearch+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { elasticsearch+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { elasticsearch+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { elasticsearch+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { elasticsearch+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { elasticsearch+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { elasticsearch+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { elasticsearch+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { elasticsearch+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { elasticsearch+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { elasticsearch+: { buffer+: { type: type } } } },
      },
      '#ca_file':: d.obj(help=''),
      ca_file: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { elasticsearch+: { ca_file+: { value: value } } } },
      },
      '#client_cert':: d.obj(help=''),
      client_cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { elasticsearch+: { client_cert+: { value: value } } } },
      },
      '#client_key':: d.obj(help=''),
      client_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { client_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { client_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { client_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { client_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { client_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { client_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { elasticsearch+: { client_key+: { value: value } } } },
      },
      '#client_key_pass':: d.obj(help=''),
      client_key_pass: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { elasticsearch+: { client_key_pass+: { value: value } } } },
      },
      '#password':: d.obj(help=''),
      password: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { password+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { password+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { password+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { password+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { elasticsearch+: { password+: { value: value } } } },
      },
      '#template_file':: d.obj(help=''),
      template_file: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { template_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { template_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { template_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { elasticsearch+: { template_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { elasticsearch+: { template_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { elasticsearch+: { template_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { elasticsearch+: { template_file+: { value: value } } } },
      },
      '#withApplication_name':: d.fn(help='', args=[d.arg(name='application_name', type=d.T.string)]),
      withApplication_name(application_name): { spec+: { elasticsearch+: { application_name: application_name } } },
      '#withBulk_message_request_threshold':: d.fn(help='', args=[d.arg(name='bulk_message_request_threshold', type=d.T.string)]),
      withBulk_message_request_threshold(bulk_message_request_threshold): { spec+: { elasticsearch+: { bulk_message_request_threshold: bulk_message_request_threshold } } },
      '#withContent_type':: d.fn(help='', args=[d.arg(name='content_type', type=d.T.string)]),
      withContent_type(content_type): { spec+: { elasticsearch+: { content_type: content_type } } },
      '#withCustom_headers':: d.fn(help='', args=[d.arg(name='custom_headers', type=d.T.string)]),
      withCustom_headers(custom_headers): { spec+: { elasticsearch+: { custom_headers: custom_headers } } },
      '#withCustomize_template':: d.fn(help='', args=[d.arg(name='customize_template', type=d.T.string)]),
      withCustomize_template(customize_template): { spec+: { elasticsearch+: { customize_template: customize_template } } },
      '#withData_stream_enable':: d.fn(help='', args=[d.arg(name='data_stream_enable', type=d.T.boolean)]),
      withData_stream_enable(data_stream_enable): { spec+: { elasticsearch+: { data_stream_enable: data_stream_enable } } },
      '#withData_stream_ilm_name':: d.fn(help='', args=[d.arg(name='data_stream_ilm_name', type=d.T.string)]),
      withData_stream_ilm_name(data_stream_ilm_name): { spec+: { elasticsearch+: { data_stream_ilm_name: data_stream_ilm_name } } },
      '#withData_stream_ilm_policy':: d.fn(help='', args=[d.arg(name='data_stream_ilm_policy', type=d.T.string)]),
      withData_stream_ilm_policy(data_stream_ilm_policy): { spec+: { elasticsearch+: { data_stream_ilm_policy: data_stream_ilm_policy } } },
      '#withData_stream_ilm_policy_overwrite':: d.fn(help='', args=[d.arg(name='data_stream_ilm_policy_overwrite', type=d.T.boolean)]),
      withData_stream_ilm_policy_overwrite(data_stream_ilm_policy_overwrite): { spec+: { elasticsearch+: { data_stream_ilm_policy_overwrite: data_stream_ilm_policy_overwrite } } },
      '#withData_stream_name':: d.fn(help='', args=[d.arg(name='data_stream_name', type=d.T.string)]),
      withData_stream_name(data_stream_name): { spec+: { elasticsearch+: { data_stream_name: data_stream_name } } },
      '#withData_stream_template_name':: d.fn(help='', args=[d.arg(name='data_stream_template_name', type=d.T.string)]),
      withData_stream_template_name(data_stream_template_name): { spec+: { elasticsearch+: { data_stream_template_name: data_stream_template_name } } },
      '#withDefault_elasticsearch_version':: d.fn(help='', args=[d.arg(name='default_elasticsearch_version', type=d.T.string)]),
      withDefault_elasticsearch_version(default_elasticsearch_version): { spec+: { elasticsearch+: { default_elasticsearch_version: default_elasticsearch_version } } },
      '#withDeflector_alias':: d.fn(help='', args=[d.arg(name='deflector_alias', type=d.T.string)]),
      withDeflector_alias(deflector_alias): { spec+: { elasticsearch+: { deflector_alias: deflector_alias } } },
      '#withEnable_ilm':: d.fn(help='', args=[d.arg(name='enable_ilm', type=d.T.boolean)]),
      withEnable_ilm(enable_ilm): { spec+: { elasticsearch+: { enable_ilm: enable_ilm } } },
      '#withException_backup':: d.fn(help='', args=[d.arg(name='exception_backup', type=d.T.boolean)]),
      withException_backup(exception_backup): { spec+: { elasticsearch+: { exception_backup: exception_backup } } },
      '#withFail_on_detecting_es_version_retry_exceed':: d.fn(help='', args=[d.arg(name='fail_on_detecting_es_version_retry_exceed', type=d.T.boolean)]),
      withFail_on_detecting_es_version_retry_exceed(fail_on_detecting_es_version_retry_exceed): { spec+: { elasticsearch+: { fail_on_detecting_es_version_retry_exceed: fail_on_detecting_es_version_retry_exceed } } },
      '#withFail_on_putting_template_retry_exceed':: d.fn(help='', args=[d.arg(name='fail_on_putting_template_retry_exceed', type=d.T.boolean)]),
      withFail_on_putting_template_retry_exceed(fail_on_putting_template_retry_exceed): { spec+: { elasticsearch+: { fail_on_putting_template_retry_exceed: fail_on_putting_template_retry_exceed } } },
      '#withFlatten_hashes':: d.fn(help='', args=[d.arg(name='flatten_hashes', type=d.T.boolean)]),
      withFlatten_hashes(flatten_hashes): { spec+: { elasticsearch+: { flatten_hashes: flatten_hashes } } },
      '#withFlatten_hashes_separator':: d.fn(help='', args=[d.arg(name='flatten_hashes_separator', type=d.T.string)]),
      withFlatten_hashes_separator(flatten_hashes_separator): { spec+: { elasticsearch+: { flatten_hashes_separator: flatten_hashes_separator } } },
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { elasticsearch+: { host: host } } },
      '#withHosts':: d.fn(help='', args=[d.arg(name='hosts', type=d.T.string)]),
      withHosts(hosts): { spec+: { elasticsearch+: { hosts: hosts } } },
      '#withHttp_backend':: d.fn(help='', args=[d.arg(name='http_backend', type=d.T.string)]),
      withHttp_backend(http_backend): { spec+: { elasticsearch+: { http_backend: http_backend } } },
      '#withId_key':: d.fn(help='', args=[d.arg(name='id_key', type=d.T.string)]),
      withId_key(id_key): { spec+: { elasticsearch+: { id_key: id_key } } },
      '#withIgnore_exceptions':: d.fn(help='', args=[d.arg(name='ignore_exceptions', type=d.T.string)]),
      withIgnore_exceptions(ignore_exceptions): { spec+: { elasticsearch+: { ignore_exceptions: ignore_exceptions } } },
      '#withIlm_policy':: d.fn(help='', args=[d.arg(name='ilm_policy', type=d.T.string)]),
      withIlm_policy(ilm_policy): { spec+: { elasticsearch+: { ilm_policy: ilm_policy } } },
      '#withIlm_policy_id':: d.fn(help='', args=[d.arg(name='ilm_policy_id', type=d.T.string)]),
      withIlm_policy_id(ilm_policy_id): { spec+: { elasticsearch+: { ilm_policy_id: ilm_policy_id } } },
      '#withIlm_policy_overwrite':: d.fn(help='', args=[d.arg(name='ilm_policy_overwrite', type=d.T.boolean)]),
      withIlm_policy_overwrite(ilm_policy_overwrite): { spec+: { elasticsearch+: { ilm_policy_overwrite: ilm_policy_overwrite } } },
      '#withInclude_index_in_url':: d.fn(help='', args=[d.arg(name='include_index_in_url', type=d.T.boolean)]),
      withInclude_index_in_url(include_index_in_url): { spec+: { elasticsearch+: { include_index_in_url: include_index_in_url } } },
      '#withInclude_tag_key':: d.fn(help='', args=[d.arg(name='include_tag_key', type=d.T.boolean)]),
      withInclude_tag_key(include_tag_key): { spec+: { elasticsearch+: { include_tag_key: include_tag_key } } },
      '#withInclude_timestamp':: d.fn(help='', args=[d.arg(name='include_timestamp', type=d.T.boolean)]),
      withInclude_timestamp(include_timestamp): { spec+: { elasticsearch+: { include_timestamp: include_timestamp } } },
      '#withIndex_date_pattern':: d.fn(help='', args=[d.arg(name='index_date_pattern', type=d.T.string)]),
      withIndex_date_pattern(index_date_pattern): { spec+: { elasticsearch+: { index_date_pattern: index_date_pattern } } },
      '#withIndex_name':: d.fn(help='', args=[d.arg(name='index_name', type=d.T.string)]),
      withIndex_name(index_name): { spec+: { elasticsearch+: { index_name: index_name } } },
      '#withIndex_prefix':: d.fn(help='', args=[d.arg(name='index_prefix', type=d.T.string)]),
      withIndex_prefix(index_prefix): { spec+: { elasticsearch+: { index_prefix: index_prefix } } },
      '#withLog_es_400_reason':: d.fn(help='', args=[d.arg(name='log_es_400_reason', type=d.T.boolean)]),
      withLog_es_400_reason(log_es_400_reason): { spec+: { elasticsearch+: { log_es_400_reason: log_es_400_reason } } },
      '#withLogstash_dateformat':: d.fn(help='', args=[d.arg(name='logstash_dateformat', type=d.T.string)]),
      withLogstash_dateformat(logstash_dateformat): { spec+: { elasticsearch+: { logstash_dateformat: logstash_dateformat } } },
      '#withLogstash_format':: d.fn(help='', args=[d.arg(name='logstash_format', type=d.T.boolean)]),
      withLogstash_format(logstash_format): { spec+: { elasticsearch+: { logstash_format: logstash_format } } },
      '#withLogstash_prefix':: d.fn(help='', args=[d.arg(name='logstash_prefix', type=d.T.string)]),
      withLogstash_prefix(logstash_prefix): { spec+: { elasticsearch+: { logstash_prefix: logstash_prefix } } },
      '#withLogstash_prefix_separator':: d.fn(help='', args=[d.arg(name='logstash_prefix_separator', type=d.T.string)]),
      withLogstash_prefix_separator(logstash_prefix_separator): { spec+: { elasticsearch+: { logstash_prefix_separator: logstash_prefix_separator } } },
      '#withMax_retry_get_es_version':: d.fn(help='', args=[d.arg(name='max_retry_get_es_version', type=d.T.string)]),
      withMax_retry_get_es_version(max_retry_get_es_version): { spec+: { elasticsearch+: { max_retry_get_es_version: max_retry_get_es_version } } },
      '#withMax_retry_putting_template':: d.fn(help='', args=[d.arg(name='max_retry_putting_template', type=d.T.string)]),
      withMax_retry_putting_template(max_retry_putting_template): { spec+: { elasticsearch+: { max_retry_putting_template: max_retry_putting_template } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { elasticsearch+: { path: path } } },
      '#withPipeline':: d.fn(help='', args=[d.arg(name='pipeline', type=d.T.string)]),
      withPipeline(pipeline): { spec+: { elasticsearch+: { pipeline: pipeline } } },
      '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { elasticsearch+: { port: port } } },
      '#withPrefer_oj_serializer':: d.fn(help='', args=[d.arg(name='prefer_oj_serializer', type=d.T.boolean)]),
      withPrefer_oj_serializer(prefer_oj_serializer): { spec+: { elasticsearch+: { prefer_oj_serializer: prefer_oj_serializer } } },
      '#withReconnect_on_error':: d.fn(help='', args=[d.arg(name='reconnect_on_error', type=d.T.boolean)]),
      withReconnect_on_error(reconnect_on_error): { spec+: { elasticsearch+: { reconnect_on_error: reconnect_on_error } } },
      '#withReload_after':: d.fn(help='', args=[d.arg(name='reload_after', type=d.T.string)]),
      withReload_after(reload_after): { spec+: { elasticsearch+: { reload_after: reload_after } } },
      '#withReload_connections':: d.fn(help='', args=[d.arg(name='reload_connections', type=d.T.boolean)]),
      withReload_connections(reload_connections): { spec+: { elasticsearch+: { reload_connections: reload_connections } } },
      '#withReload_on_failure':: d.fn(help='', args=[d.arg(name='reload_on_failure', type=d.T.boolean)]),
      withReload_on_failure(reload_on_failure): { spec+: { elasticsearch+: { reload_on_failure: reload_on_failure } } },
      '#withRemove_keys':: d.fn(help='', args=[d.arg(name='remove_keys', type=d.T.string)]),
      withRemove_keys(remove_keys): { spec+: { elasticsearch+: { remove_keys: remove_keys } } },
      '#withRemove_keys_on_update':: d.fn(help='', args=[d.arg(name='remove_keys_on_update', type=d.T.string)]),
      withRemove_keys_on_update(remove_keys_on_update): { spec+: { elasticsearch+: { remove_keys_on_update: remove_keys_on_update } } },
      '#withRemove_keys_on_update_key':: d.fn(help='', args=[d.arg(name='remove_keys_on_update_key', type=d.T.string)]),
      withRemove_keys_on_update_key(remove_keys_on_update_key): { spec+: { elasticsearch+: { remove_keys_on_update_key: remove_keys_on_update_key } } },
      '#withRequest_timeout':: d.fn(help='', args=[d.arg(name='request_timeout', type=d.T.string)]),
      withRequest_timeout(request_timeout): { spec+: { elasticsearch+: { request_timeout: request_timeout } } },
      '#withResurrect_after':: d.fn(help='', args=[d.arg(name='resurrect_after', type=d.T.string)]),
      withResurrect_after(resurrect_after): { spec+: { elasticsearch+: { resurrect_after: resurrect_after } } },
      '#withRetry_tag':: d.fn(help='', args=[d.arg(name='retry_tag', type=d.T.string)]),
      withRetry_tag(retry_tag): { spec+: { elasticsearch+: { retry_tag: retry_tag } } },
      '#withRollover_index':: d.fn(help='', args=[d.arg(name='rollover_index', type=d.T.boolean)]),
      withRollover_index(rollover_index): { spec+: { elasticsearch+: { rollover_index: rollover_index } } },
      '#withRouting_key':: d.fn(help='', args=[d.arg(name='routing_key', type=d.T.string)]),
      withRouting_key(routing_key): { spec+: { elasticsearch+: { routing_key: routing_key } } },
      '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
      withScheme(scheme): { spec+: { elasticsearch+: { scheme: scheme } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { elasticsearch+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSniffer_class_name':: d.fn(help='', args=[d.arg(name='sniffer_class_name', type=d.T.string)]),
      withSniffer_class_name(sniffer_class_name): { spec+: { elasticsearch+: { sniffer_class_name: sniffer_class_name } } },
      '#withSsl_max_version':: d.fn(help='', args=[d.arg(name='ssl_max_version', type=d.T.string)]),
      withSsl_max_version(ssl_max_version): { spec+: { elasticsearch+: { ssl_max_version: ssl_max_version } } },
      '#withSsl_min_version':: d.fn(help='', args=[d.arg(name='ssl_min_version', type=d.T.string)]),
      withSsl_min_version(ssl_min_version): { spec+: { elasticsearch+: { ssl_min_version: ssl_min_version } } },
      '#withSsl_verify':: d.fn(help='', args=[d.arg(name='ssl_verify', type=d.T.boolean)]),
      withSsl_verify(ssl_verify): { spec+: { elasticsearch+: { ssl_verify: ssl_verify } } },
      '#withSsl_version':: d.fn(help='', args=[d.arg(name='ssl_version', type=d.T.string)]),
      withSsl_version(ssl_version): { spec+: { elasticsearch+: { ssl_version: ssl_version } } },
      '#withSuppress_doc_wrap':: d.fn(help='', args=[d.arg(name='suppress_doc_wrap', type=d.T.boolean)]),
      withSuppress_doc_wrap(suppress_doc_wrap): { spec+: { elasticsearch+: { suppress_doc_wrap: suppress_doc_wrap } } },
      '#withSuppress_type_name':: d.fn(help='', args=[d.arg(name='suppress_type_name', type=d.T.boolean)]),
      withSuppress_type_name(suppress_type_name): { spec+: { elasticsearch+: { suppress_type_name: suppress_type_name } } },
      '#withTag_key':: d.fn(help='', args=[d.arg(name='tag_key', type=d.T.string)]),
      withTag_key(tag_key): { spec+: { elasticsearch+: { tag_key: tag_key } } },
      '#withTarget_index_key':: d.fn(help='', args=[d.arg(name='target_index_key', type=d.T.string)]),
      withTarget_index_key(target_index_key): { spec+: { elasticsearch+: { target_index_key: target_index_key } } },
      '#withTarget_type_key':: d.fn(help='', args=[d.arg(name='target_type_key', type=d.T.string)]),
      withTarget_type_key(target_type_key): { spec+: { elasticsearch+: { target_type_key: target_type_key } } },
      '#withTemplate_name':: d.fn(help='', args=[d.arg(name='template_name', type=d.T.string)]),
      withTemplate_name(template_name): { spec+: { elasticsearch+: { template_name: template_name } } },
      '#withTemplate_overwrite':: d.fn(help='', args=[d.arg(name='template_overwrite', type=d.T.boolean)]),
      withTemplate_overwrite(template_overwrite): { spec+: { elasticsearch+: { template_overwrite: template_overwrite } } },
      '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.string)]),
      withTemplates(templates): { spec+: { elasticsearch+: { templates: templates } } },
      '#withTime_key':: d.fn(help='', args=[d.arg(name='time_key', type=d.T.string)]),
      withTime_key(time_key): { spec+: { elasticsearch+: { time_key: time_key } } },
      '#withTime_key_format':: d.fn(help='', args=[d.arg(name='time_key_format', type=d.T.string)]),
      withTime_key_format(time_key_format): { spec+: { elasticsearch+: { time_key_format: time_key_format } } },
      '#withTime_parse_error_tag':: d.fn(help='', args=[d.arg(name='time_parse_error_tag', type=d.T.string)]),
      withTime_parse_error_tag(time_parse_error_tag): { spec+: { elasticsearch+: { time_parse_error_tag: time_parse_error_tag } } },
      '#withTime_precision':: d.fn(help='', args=[d.arg(name='time_precision', type=d.T.string)]),
      withTime_precision(time_precision): { spec+: { elasticsearch+: { time_precision: time_precision } } },
      '#withType_name':: d.fn(help='', args=[d.arg(name='type_name', type=d.T.string)]),
      withType_name(type_name): { spec+: { elasticsearch+: { type_name: type_name } } },
      '#withUnrecoverable_error_types':: d.fn(help='', args=[d.arg(name='unrecoverable_error_types', type=d.T.string)]),
      withUnrecoverable_error_types(unrecoverable_error_types): { spec+: { elasticsearch+: { unrecoverable_error_types: unrecoverable_error_types } } },
      '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
      withUser(user): { spec+: { elasticsearch+: { user: user } } },
      '#withUtc_index':: d.fn(help='', args=[d.arg(name='utc_index', type=d.T.boolean)]),
      withUtc_index(utc_index): { spec+: { elasticsearch+: { utc_index: utc_index } } },
      '#withValidate_client_version':: d.fn(help='', args=[d.arg(name='validate_client_version', type=d.T.boolean)]),
      withValidate_client_version(validate_client_version): { spec+: { elasticsearch+: { validate_client_version: validate_client_version } } },
      '#withVerify_es_version_at_startup':: d.fn(help='', args=[d.arg(name='verify_es_version_at_startup', type=d.T.boolean)]),
      withVerify_es_version_at_startup(verify_es_version_at_startup): { spec+: { elasticsearch+: { verify_es_version_at_startup: verify_es_version_at_startup } } },
      '#withWith_transporter_log':: d.fn(help='', args=[d.arg(name='with_transporter_log', type=d.T.boolean)]),
      withWith_transporter_log(with_transporter_log): { spec+: { elasticsearch+: { with_transporter_log: with_transporter_log } } },
      '#withWrite_operation':: d.fn(help='', args=[d.arg(name='write_operation', type=d.T.string)]),
      withWrite_operation(write_operation): { spec+: { elasticsearch+: { write_operation: write_operation } } },
    },
    '#file':: d.obj(help=''),
    file: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { file+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { file+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { file+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { file+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { file+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { file+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { file+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { file+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { file+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { file+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { file+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { file+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { file+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { file+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { file+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { file+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { file+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { file+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { file+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { file+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { file+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { file+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { file+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { file+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { file+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { file+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { file+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { file+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { file+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { file+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { file+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { file+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { file+: { buffer+: { type: type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { file+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { file+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { file+: { format+: { type: type } } } },
      },
      '#withAdd_path_suffix':: d.fn(help='', args=[d.arg(name='add_path_suffix', type=d.T.boolean)]),
      withAdd_path_suffix(add_path_suffix): { spec+: { file+: { add_path_suffix: add_path_suffix } } },
      '#withAppend':: d.fn(help='', args=[d.arg(name='append', type=d.T.boolean)]),
      withAppend(append): { spec+: { file+: { append: append } } },
      '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
      withCompress(compress): { spec+: { file+: { compress: compress } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { file+: { path: path } } },
      '#withPath_suffix':: d.fn(help='', args=[d.arg(name='path_suffix', type=d.T.string)]),
      withPath_suffix(path_suffix): { spec+: { file+: { path_suffix: path_suffix } } },
      '#withRecompress':: d.fn(help='', args=[d.arg(name='recompress', type=d.T.boolean)]),
      withRecompress(recompress): { spec+: { file+: { recompress: recompress } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { file+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSymlink_path':: d.fn(help='', args=[d.arg(name='symlink_path', type=d.T.boolean)]),
      withSymlink_path(symlink_path): { spec+: { file+: { symlink_path: symlink_path } } },
    },
    '#forward':: d.obj(help=''),
    forward: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { forward+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { forward+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { forward+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { forward+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { forward+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { forward+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { forward+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { forward+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { forward+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { forward+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { forward+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { forward+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { forward+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { forward+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { forward+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { forward+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { forward+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { forward+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { forward+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { forward+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { forward+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { forward+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { forward+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { forward+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { forward+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { forward+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { forward+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { forward+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { forward+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { forward+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { forward+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { forward+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { forward+: { buffer+: { type: type } } } },
      },
      '#security':: d.obj(help=''),
      security: {
        '#withAllow_anonymous_source':: d.fn(help='', args=[d.arg(name='allow_anonymous_source', type=d.T.boolean)]),
        withAllow_anonymous_source(allow_anonymous_source): { spec+: { forward+: { security+: { allow_anonymous_source: allow_anonymous_source } } } },
        '#withSelf_hostname':: d.fn(help='', args=[d.arg(name='self_hostname', type=d.T.string)]),
        withSelf_hostname(self_hostname): { spec+: { forward+: { security+: { self_hostname: self_hostname } } } },
        '#withShared_key':: d.fn(help='', args=[d.arg(name='shared_key', type=d.T.string)]),
        withShared_key(shared_key): { spec+: { forward+: { security+: { shared_key: shared_key } } } },
        '#withUser_auth':: d.fn(help='', args=[d.arg(name='user_auth', type=d.T.boolean)]),
        withUser_auth(user_auth): { spec+: { forward+: { security+: { user_auth: user_auth } } } },
      },
      '#servers':: d.obj(help=''),
      servers: {
        '#password':: d.obj(help=''),
        password: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { password+: { mountFrom+: { secretKeyRef+: { key: key } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { password+: { mountFrom+: { secretKeyRef+: { name: name } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { password+: { valueFrom+: { secretKeyRef+: { key: key } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { password+: { valueFrom+: { secretKeyRef+: { name: name } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { password+: { value: value } },
        },
        '#shared_key':: d.obj(help=''),
        shared_key: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { shared_key+: { mountFrom+: { secretKeyRef+: { key: key } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { shared_key+: { mountFrom+: { secretKeyRef+: { name: name } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { shared_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { shared_key+: { valueFrom+: { secretKeyRef+: { key: key } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { shared_key+: { valueFrom+: { secretKeyRef+: { name: name } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { shared_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { shared_key+: { value: value } },
        },
        '#username':: d.obj(help=''),
        username: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { username+: { mountFrom+: { secretKeyRef+: { key: key } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { username+: { mountFrom+: { secretKeyRef+: { name: name } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { username+: { mountFrom+: { secretKeyRef+: { optional: optional } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { username+: { valueFrom+: { secretKeyRef+: { key: key } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { username+: { valueFrom+: { secretKeyRef+: { name: name } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { username+: { valueFrom+: { secretKeyRef+: { optional: optional } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { username+: { value: value } },
        },
        '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
        withHost(host): { host: host },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { port: port },
        '#withStandby':: d.fn(help='', args=[d.arg(name='standby', type=d.T.boolean)]),
        withStandby(standby): { standby: standby },
        '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
        withWeight(weight): { weight: weight },
      },
      '#tls_cert_path':: d.obj(help=''),
      tls_cert_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_cert_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_cert_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_cert_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_cert_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_cert_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_cert_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { forward+: { tls_cert_path+: { value: value } } } },
      },
      '#tls_client_cert_path':: d.obj(help=''),
      tls_client_cert_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_client_cert_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_client_cert_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_client_cert_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_client_cert_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_client_cert_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_client_cert_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { forward+: { tls_client_cert_path+: { value: value } } } },
      },
      '#tls_client_private_key_passphrase':: d.obj(help=''),
      tls_client_private_key_passphrase: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_client_private_key_passphrase+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_client_private_key_passphrase+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_client_private_key_passphrase+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_client_private_key_passphrase+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_client_private_key_passphrase+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_client_private_key_passphrase+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { forward+: { tls_client_private_key_passphrase+: { value: value } } } },
      },
      '#tls_client_private_key_path':: d.obj(help=''),
      tls_client_private_key_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_client_private_key_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_client_private_key_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_client_private_key_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { forward+: { tls_client_private_key_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { forward+: { tls_client_private_key_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { forward+: { tls_client_private_key_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { forward+: { tls_client_private_key_path+: { value: value } } } },
      },
      '#withAck_response_timeout':: d.fn(help='', args=[d.arg(name='ack_response_timeout', type=d.T.integer)]),
      withAck_response_timeout(ack_response_timeout): { spec+: { forward+: { ack_response_timeout: ack_response_timeout } } },
      '#withConnect_timeout':: d.fn(help='', args=[d.arg(name='connect_timeout', type=d.T.integer)]),
      withConnect_timeout(connect_timeout): { spec+: { forward+: { connect_timeout: connect_timeout } } },
      '#withDns_round_robin':: d.fn(help='', args=[d.arg(name='dns_round_robin', type=d.T.boolean)]),
      withDns_round_robin(dns_round_robin): { spec+: { forward+: { dns_round_robin: dns_round_robin } } },
      '#withExpire_dns_cache':: d.fn(help='', args=[d.arg(name='expire_dns_cache', type=d.T.integer)]),
      withExpire_dns_cache(expire_dns_cache): { spec+: { forward+: { expire_dns_cache: expire_dns_cache } } },
      '#withHard_timeout':: d.fn(help='', args=[d.arg(name='hard_timeout', type=d.T.integer)]),
      withHard_timeout(hard_timeout): { spec+: { forward+: { hard_timeout: hard_timeout } } },
      '#withHeartbeat_interval':: d.fn(help='', args=[d.arg(name='heartbeat_interval', type=d.T.integer)]),
      withHeartbeat_interval(heartbeat_interval): { spec+: { forward+: { heartbeat_interval: heartbeat_interval } } },
      '#withHeartbeat_type':: d.fn(help='', args=[d.arg(name='heartbeat_type', type=d.T.string)]),
      withHeartbeat_type(heartbeat_type): { spec+: { forward+: { heartbeat_type: heartbeat_type } } },
      '#withIgnore_network_errors_at_startup':: d.fn(help='', args=[d.arg(name='ignore_network_errors_at_startup', type=d.T.boolean)]),
      withIgnore_network_errors_at_startup(ignore_network_errors_at_startup): { spec+: { forward+: { ignore_network_errors_at_startup: ignore_network_errors_at_startup } } },
      '#withKeepalive':: d.fn(help='', args=[d.arg(name='keepalive', type=d.T.boolean)]),
      withKeepalive(keepalive): { spec+: { forward+: { keepalive: keepalive } } },
      '#withKeepalive_timeout':: d.fn(help='', args=[d.arg(name='keepalive_timeout', type=d.T.integer)]),
      withKeepalive_timeout(keepalive_timeout): { spec+: { forward+: { keepalive_timeout: keepalive_timeout } } },
      '#withPhi_failure_detector':: d.fn(help='', args=[d.arg(name='phi_failure_detector', type=d.T.boolean)]),
      withPhi_failure_detector(phi_failure_detector): { spec+: { forward+: { phi_failure_detector: phi_failure_detector } } },
      '#withPhi_threshold':: d.fn(help='', args=[d.arg(name='phi_threshold', type=d.T.integer)]),
      withPhi_threshold(phi_threshold): { spec+: { forward+: { phi_threshold: phi_threshold } } },
      '#withRecover_wait':: d.fn(help='', args=[d.arg(name='recover_wait', type=d.T.integer)]),
      withRecover_wait(recover_wait): { spec+: { forward+: { recover_wait: recover_wait } } },
      '#withRequire_ack_response':: d.fn(help='', args=[d.arg(name='require_ack_response', type=d.T.boolean)]),
      withRequire_ack_response(require_ack_response): { spec+: { forward+: { require_ack_response: require_ack_response } } },
      '#withSend_timeout':: d.fn(help='', args=[d.arg(name='send_timeout', type=d.T.integer)]),
      withSend_timeout(send_timeout): { spec+: { forward+: { send_timeout: send_timeout } } },
      '#withServers':: d.fn(help='', args=[d.arg(name='servers', type=d.T.array)]),
      withServers(servers): { spec+: { forward+: { servers: if std.isArray(v=servers) then servers else [servers] } } },
      '#withServersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='servers', type=d.T.array)]),
      withServersMixin(servers): { spec+: { forward+: { servers+: if std.isArray(v=servers) then servers else [servers] } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { forward+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withTls_allow_self_signed_cert':: d.fn(help='', args=[d.arg(name='tls_allow_self_signed_cert', type=d.T.boolean)]),
      withTls_allow_self_signed_cert(tls_allow_self_signed_cert): { spec+: { forward+: { tls_allow_self_signed_cert: tls_allow_self_signed_cert } } },
      '#withTls_cert_logical_store_name':: d.fn(help='', args=[d.arg(name='tls_cert_logical_store_name', type=d.T.string)]),
      withTls_cert_logical_store_name(tls_cert_logical_store_name): { spec+: { forward+: { tls_cert_logical_store_name: tls_cert_logical_store_name } } },
      '#withTls_cert_thumbprint':: d.fn(help='', args=[d.arg(name='tls_cert_thumbprint', type=d.T.string)]),
      withTls_cert_thumbprint(tls_cert_thumbprint): { spec+: { forward+: { tls_cert_thumbprint: tls_cert_thumbprint } } },
      '#withTls_cert_use_enterprise_store':: d.fn(help='', args=[d.arg(name='tls_cert_use_enterprise_store', type=d.T.boolean)]),
      withTls_cert_use_enterprise_store(tls_cert_use_enterprise_store): { spec+: { forward+: { tls_cert_use_enterprise_store: tls_cert_use_enterprise_store } } },
      '#withTls_ciphers':: d.fn(help='', args=[d.arg(name='tls_ciphers', type=d.T.string)]),
      withTls_ciphers(tls_ciphers): { spec+: { forward+: { tls_ciphers: tls_ciphers } } },
      '#withTls_insecure_mode':: d.fn(help='', args=[d.arg(name='tls_insecure_mode', type=d.T.boolean)]),
      withTls_insecure_mode(tls_insecure_mode): { spec+: { forward+: { tls_insecure_mode: tls_insecure_mode } } },
      '#withTls_verify_hostname':: d.fn(help='', args=[d.arg(name='tls_verify_hostname', type=d.T.boolean)]),
      withTls_verify_hostname(tls_verify_hostname): { spec+: { forward+: { tls_verify_hostname: tls_verify_hostname } } },
      '#withTls_version':: d.fn(help='', args=[d.arg(name='tls_version', type=d.T.string)]),
      withTls_version(tls_version): { spec+: { forward+: { tls_version: tls_version } } },
      '#withTransport':: d.fn(help='', args=[d.arg(name='transport', type=d.T.string)]),
      withTransport(transport): { spec+: { forward+: { transport: transport } } },
      '#withVerify_connection_at_startup':: d.fn(help='', args=[d.arg(name='verify_connection_at_startup', type=d.T.boolean)]),
      withVerify_connection_at_startup(verify_connection_at_startup): { spec+: { forward+: { verify_connection_at_startup: verify_connection_at_startup } } },
    },
    '#gcs':: d.obj(help=''),
    gcs: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { gcs+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { gcs+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { gcs+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { gcs+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { gcs+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { gcs+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { gcs+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { gcs+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { gcs+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { gcs+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { gcs+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { gcs+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { gcs+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { gcs+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { gcs+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { gcs+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { gcs+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { gcs+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { gcs+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { gcs+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { gcs+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { gcs+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { gcs+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { gcs+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { gcs+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { gcs+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { gcs+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { gcs+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { gcs+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { gcs+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { gcs+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { gcs+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { gcs+: { buffer+: { type: type } } } },
      },
      '#credentials_json':: d.obj(help=''),
      credentials_json: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { gcs+: { credentials_json+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { gcs+: { credentials_json+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { gcs+: { credentials_json+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { gcs+: { credentials_json+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { gcs+: { credentials_json+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { gcs+: { credentials_json+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { gcs+: { credentials_json+: { value: value } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { gcs+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { gcs+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { gcs+: { format+: { type: type } } } },
      },
      '#object_metadata':: d.obj(help=''),
      object_metadata: {
        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withAcl':: d.fn(help='', args=[d.arg(name='acl', type=d.T.string)]),
      withAcl(acl): { spec+: { gcs+: { acl: acl } } },
      '#withAuto_create_bucket':: d.fn(help='', args=[d.arg(name='auto_create_bucket', type=d.T.boolean)]),
      withAuto_create_bucket(auto_create_bucket): { spec+: { gcs+: { auto_create_bucket: auto_create_bucket } } },
      '#withBucket':: d.fn(help='', args=[d.arg(name='bucket', type=d.T.string)]),
      withBucket(bucket): { spec+: { gcs+: { bucket: bucket } } },
      '#withClient_retries':: d.fn(help='', args=[d.arg(name='client_retries', type=d.T.integer)]),
      withClient_retries(client_retries): { spec+: { gcs+: { client_retries: client_retries } } },
      '#withClient_timeout':: d.fn(help='', args=[d.arg(name='client_timeout', type=d.T.integer)]),
      withClient_timeout(client_timeout): { spec+: { gcs+: { client_timeout: client_timeout } } },
      '#withEncryption_key':: d.fn(help='', args=[d.arg(name='encryption_key', type=d.T.string)]),
      withEncryption_key(encryption_key): { spec+: { gcs+: { encryption_key: encryption_key } } },
      '#withHex_random_length':: d.fn(help='', args=[d.arg(name='hex_random_length', type=d.T.integer)]),
      withHex_random_length(hex_random_length): { spec+: { gcs+: { hex_random_length: hex_random_length } } },
      '#withKeyfile':: d.fn(help='', args=[d.arg(name='keyfile', type=d.T.string)]),
      withKeyfile(keyfile): { spec+: { gcs+: { keyfile: keyfile } } },
      '#withObject_key_format':: d.fn(help='', args=[d.arg(name='object_key_format', type=d.T.string)]),
      withObject_key_format(object_key_format): { spec+: { gcs+: { object_key_format: object_key_format } } },
      '#withObject_metadata':: d.fn(help='', args=[d.arg(name='object_metadata', type=d.T.array)]),
      withObject_metadata(object_metadata): { spec+: { gcs+: { object_metadata: if std.isArray(v=object_metadata) then object_metadata else [object_metadata] } } },
      '#withObject_metadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='object_metadata', type=d.T.array)]),
      withObject_metadataMixin(object_metadata): { spec+: { gcs+: { object_metadata+: if std.isArray(v=object_metadata) then object_metadata else [object_metadata] } } },
      '#withOverwrite':: d.fn(help='', args=[d.arg(name='overwrite', type=d.T.boolean)]),
      withOverwrite(overwrite): { spec+: { gcs+: { overwrite: overwrite } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { gcs+: { path: path } } },
      '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
      withProject(project): { spec+: { gcs+: { project: project } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { gcs+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withStorage_class':: d.fn(help='', args=[d.arg(name='storage_class', type=d.T.string)]),
      withStorage_class(storage_class): { spec+: { gcs+: { storage_class: storage_class } } },
      '#withStore_as':: d.fn(help='', args=[d.arg(name='store_as', type=d.T.string)]),
      withStore_as(store_as): { spec+: { gcs+: { store_as: store_as } } },
      '#withTranscoding':: d.fn(help='', args=[d.arg(name='transcoding', type=d.T.boolean)]),
      withTranscoding(transcoding): { spec+: { gcs+: { transcoding: transcoding } } },
    },
    '#gelf':: d.obj(help=''),
    gelf: {
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { gelf+: { host: host } } },
      '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { gelf+: { port: port } } },
      '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
      withProtocol(protocol): { spec+: { gelf+: { protocol: protocol } } },
      '#withTls':: d.fn(help='', args=[d.arg(name='tls', type=d.T.boolean)]),
      withTls(tls): { spec+: { gelf+: { tls: tls } } },
      '#withTls_options':: d.fn(help='', args=[d.arg(name='tls_options', type=d.T.object)]),
      withTls_options(tls_options): { spec+: { gelf+: { tls_options: tls_options } } },
      '#withTls_optionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tls_options', type=d.T.object)]),
      withTls_optionsMixin(tls_options): { spec+: { gelf+: { tls_options+: tls_options } } },
    },
    '#http':: d.obj(help=''),
    http: {
      '#auth':: d.obj(help=''),
      auth: {
        '#password':: d.obj(help=''),
        password: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { http+: { auth+: { password+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { http+: { auth+: { password+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { http+: { auth+: { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { http+: { auth+: { password+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { http+: { auth+: { password+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { http+: { auth+: { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { http+: { auth+: { password+: { value: value } } } } },
        },
        '#username':: d.obj(help=''),
        username: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { http+: { auth+: { username+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { http+: { auth+: { username+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { http+: { auth+: { username+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { http+: { auth+: { username+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { http+: { auth+: { username+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { http+: { auth+: { username+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { http+: { auth+: { username+: { value: value } } } } },
        },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { http+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { http+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { http+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { http+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { http+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { http+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { http+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { http+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { http+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { http+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { http+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { http+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { http+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { http+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { http+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { http+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { http+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { http+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { http+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { http+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { http+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { http+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { http+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { http+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { http+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { http+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { http+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { http+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { http+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { http+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { http+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { http+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { http+: { buffer+: { type: type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { http+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { http+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { http+: { format+: { type: type } } } },
      },
      '#tls_ca_cert_path':: d.obj(help=''),
      tls_ca_cert_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_ca_cert_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_ca_cert_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_ca_cert_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_ca_cert_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_ca_cert_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_ca_cert_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { http+: { tls_ca_cert_path+: { value: value } } } },
      },
      '#tls_client_cert_path':: d.obj(help=''),
      tls_client_cert_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_client_cert_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_client_cert_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_client_cert_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_client_cert_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_client_cert_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_client_cert_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { http+: { tls_client_cert_path+: { value: value } } } },
      },
      '#tls_private_key_passphrase':: d.obj(help=''),
      tls_private_key_passphrase: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_private_key_passphrase+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_private_key_passphrase+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_private_key_passphrase+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_private_key_passphrase+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_private_key_passphrase+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_private_key_passphrase+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { http+: { tls_private_key_passphrase+: { value: value } } } },
      },
      '#tls_private_key_path':: d.obj(help=''),
      tls_private_key_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_private_key_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_private_key_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_private_key_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { http+: { tls_private_key_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { http+: { tls_private_key_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { http+: { tls_private_key_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { http+: { tls_private_key_path+: { value: value } } } },
      },
      '#withContent_type':: d.fn(help='', args=[d.arg(name='content_type', type=d.T.string)]),
      withContent_type(content_type): { spec+: { http+: { content_type: content_type } } },
      '#withEndpoint':: d.fn(help='', args=[d.arg(name='endpoint', type=d.T.string)]),
      withEndpoint(endpoint): { spec+: { http+: { endpoint: endpoint } } },
      '#withError_response_as_unrecoverable':: d.fn(help='', args=[d.arg(name='error_response_as_unrecoverable', type=d.T.boolean)]),
      withError_response_as_unrecoverable(error_response_as_unrecoverable): { spec+: { http+: { error_response_as_unrecoverable: error_response_as_unrecoverable } } },
      '#withHeaders':: d.fn(help='', args=[d.arg(name='headers', type=d.T.object)]),
      withHeaders(headers): { spec+: { http+: { headers: headers } } },
      '#withHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.object)]),
      withHeadersMixin(headers): { spec+: { http+: { headers+: headers } } },
      '#withHttp_method':: d.fn(help='', args=[d.arg(name='http_method', type=d.T.string)]),
      withHttp_method(http_method): { spec+: { http+: { http_method: http_method } } },
      '#withJson_array':: d.fn(help='', args=[d.arg(name='json_array', type=d.T.boolean)]),
      withJson_array(json_array): { spec+: { http+: { json_array: json_array } } },
      '#withOpen_timeout':: d.fn(help='', args=[d.arg(name='open_timeout', type=d.T.integer)]),
      withOpen_timeout(open_timeout): { spec+: { http+: { open_timeout: open_timeout } } },
      '#withProxy':: d.fn(help='', args=[d.arg(name='proxy', type=d.T.string)]),
      withProxy(proxy): { spec+: { http+: { proxy: proxy } } },
      '#withRead_timeout':: d.fn(help='', args=[d.arg(name='read_timeout', type=d.T.integer)]),
      withRead_timeout(read_timeout): { spec+: { http+: { read_timeout: read_timeout } } },
      '#withRetryable_response_codes':: d.fn(help='', args=[d.arg(name='retryable_response_codes', type=d.T.array)]),
      withRetryable_response_codes(retryable_response_codes): { spec+: { http+: { retryable_response_codes: if std.isArray(v=retryable_response_codes) then retryable_response_codes else [retryable_response_codes] } } },
      '#withRetryable_response_codesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='retryable_response_codes', type=d.T.array)]),
      withRetryable_response_codesMixin(retryable_response_codes): { spec+: { http+: { retryable_response_codes+: if std.isArray(v=retryable_response_codes) then retryable_response_codes else [retryable_response_codes] } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { http+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSsl_timeout':: d.fn(help='', args=[d.arg(name='ssl_timeout', type=d.T.integer)]),
      withSsl_timeout(ssl_timeout): { spec+: { http+: { ssl_timeout: ssl_timeout } } },
      '#withTls_ciphers':: d.fn(help='', args=[d.arg(name='tls_ciphers', type=d.T.string)]),
      withTls_ciphers(tls_ciphers): { spec+: { http+: { tls_ciphers: tls_ciphers } } },
      '#withTls_verify_mode':: d.fn(help='', args=[d.arg(name='tls_verify_mode', type=d.T.string)]),
      withTls_verify_mode(tls_verify_mode): { spec+: { http+: { tls_verify_mode: tls_verify_mode } } },
      '#withTls_version':: d.fn(help='', args=[d.arg(name='tls_version', type=d.T.string)]),
      withTls_version(tls_version): { spec+: { http+: { tls_version: tls_version } } },
    },
    '#kafka':: d.obj(help=''),
    kafka: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { kafka+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { kafka+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { kafka+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { kafka+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { kafka+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { kafka+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { kafka+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { kafka+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { kafka+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { kafka+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { kafka+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { kafka+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { kafka+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { kafka+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { kafka+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { kafka+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { kafka+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { kafka+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { kafka+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { kafka+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { kafka+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { kafka+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { kafka+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { kafka+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { kafka+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { kafka+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { kafka+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { kafka+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { kafka+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { kafka+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { kafka+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { kafka+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kafka+: { buffer+: { type: type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { kafka+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { kafka+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kafka+: { format+: { type: type } } } },
      },
      '#keytab':: d.obj(help=''),
      keytab: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { keytab+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { keytab+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { keytab+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { keytab+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { keytab+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { keytab+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kafka+: { keytab+: { value: value } } } },
      },
      '#password':: d.obj(help=''),
      password: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { password+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { password+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { password+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { password+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kafka+: { password+: { value: value } } } },
      },
      '#ssl_ca_cert':: d.obj(help=''),
      ssl_ca_cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_ca_cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_ca_cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_ca_cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_ca_cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_ca_cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_ca_cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kafka+: { ssl_ca_cert+: { value: value } } } },
      },
      '#ssl_client_cert':: d.obj(help=''),
      ssl_client_cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_client_cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_client_cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_client_cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_client_cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_client_cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_client_cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kafka+: { ssl_client_cert+: { value: value } } } },
      },
      '#ssl_client_cert_chain':: d.obj(help=''),
      ssl_client_cert_chain: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_client_cert_chain+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_client_cert_chain+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_client_cert_chain+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_client_cert_chain+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_client_cert_chain+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_client_cert_chain+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kafka+: { ssl_client_cert_chain+: { value: value } } } },
      },
      '#ssl_client_cert_key':: d.obj(help=''),
      ssl_client_cert_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_client_cert_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_client_cert_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_client_cert_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { ssl_client_cert_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { ssl_client_cert_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { ssl_client_cert_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kafka+: { ssl_client_cert_key+: { value: value } } } },
      },
      '#username':: d.obj(help=''),
      username: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { username+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { username+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { username+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { username+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { username+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { username+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kafka+: { username+: { value: value } } } },
      },
      '#withAck_timeout':: d.fn(help='', args=[d.arg(name='ack_timeout', type=d.T.integer)]),
      withAck_timeout(ack_timeout): { spec+: { kafka+: { ack_timeout: ack_timeout } } },
      '#withBrokers':: d.fn(help='', args=[d.arg(name='brokers', type=d.T.string)]),
      withBrokers(brokers): { spec+: { kafka+: { brokers: brokers } } },
      '#withClient_id':: d.fn(help='', args=[d.arg(name='client_id', type=d.T.string)]),
      withClient_id(client_id): { spec+: { kafka+: { client_id: client_id } } },
      '#withCompression_codec':: d.fn(help='', args=[d.arg(name='compression_codec', type=d.T.string)]),
      withCompression_codec(compression_codec): { spec+: { kafka+: { compression_codec: compression_codec } } },
      '#withDefault_message_key':: d.fn(help='', args=[d.arg(name='default_message_key', type=d.T.string)]),
      withDefault_message_key(default_message_key): { spec+: { kafka+: { default_message_key: default_message_key } } },
      '#withDefault_partition_key':: d.fn(help='', args=[d.arg(name='default_partition_key', type=d.T.string)]),
      withDefault_partition_key(default_partition_key): { spec+: { kafka+: { default_partition_key: default_partition_key } } },
      '#withDefault_topic':: d.fn(help='', args=[d.arg(name='default_topic', type=d.T.string)]),
      withDefault_topic(default_topic): { spec+: { kafka+: { default_topic: default_topic } } },
      '#withDiscard_kafka_delivery_failed':: d.fn(help='', args=[d.arg(name='discard_kafka_delivery_failed', type=d.T.boolean)]),
      withDiscard_kafka_delivery_failed(discard_kafka_delivery_failed): { spec+: { kafka+: { discard_kafka_delivery_failed: discard_kafka_delivery_failed } } },
      '#withExclude_partion_key':: d.fn(help='', args=[d.arg(name='exclude_partion_key', type=d.T.boolean)]),
      withExclude_partion_key(exclude_partion_key): { spec+: { kafka+: { exclude_partion_key: exclude_partion_key } } },
      '#withExclude_topic_key':: d.fn(help='', args=[d.arg(name='exclude_topic_key', type=d.T.boolean)]),
      withExclude_topic_key(exclude_topic_key): { spec+: { kafka+: { exclude_topic_key: exclude_topic_key } } },
      '#withGet_kafka_client_log':: d.fn(help='', args=[d.arg(name='get_kafka_client_log', type=d.T.boolean)]),
      withGet_kafka_client_log(get_kafka_client_log): { spec+: { kafka+: { get_kafka_client_log: get_kafka_client_log } } },
      '#withHeaders':: d.fn(help='', args=[d.arg(name='headers', type=d.T.object)]),
      withHeaders(headers): { spec+: { kafka+: { headers: headers } } },
      '#withHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.object)]),
      withHeadersMixin(headers): { spec+: { kafka+: { headers+: headers } } },
      '#withHeaders_from_record':: d.fn(help='', args=[d.arg(name='headers_from_record', type=d.T.object)]),
      withHeaders_from_record(headers_from_record): { spec+: { kafka+: { headers_from_record: headers_from_record } } },
      '#withHeaders_from_recordMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers_from_record', type=d.T.object)]),
      withHeaders_from_recordMixin(headers_from_record): { spec+: { kafka+: { headers_from_record+: headers_from_record } } },
      '#withIdempotent':: d.fn(help='', args=[d.arg(name='idempotent', type=d.T.boolean)]),
      withIdempotent(idempotent): { spec+: { kafka+: { idempotent: idempotent } } },
      '#withKafka_agg_max_bytes':: d.fn(help='', args=[d.arg(name='kafka_agg_max_bytes', type=d.T.integer)]),
      withKafka_agg_max_bytes(kafka_agg_max_bytes): { spec+: { kafka+: { kafka_agg_max_bytes: kafka_agg_max_bytes } } },
      '#withKafka_agg_max_messages':: d.fn(help='', args=[d.arg(name='kafka_agg_max_messages', type=d.T.integer)]),
      withKafka_agg_max_messages(kafka_agg_max_messages): { spec+: { kafka+: { kafka_agg_max_messages: kafka_agg_max_messages } } },
      '#withMax_send_retries':: d.fn(help='', args=[d.arg(name='max_send_retries', type=d.T.integer)]),
      withMax_send_retries(max_send_retries): { spec+: { kafka+: { max_send_retries: max_send_retries } } },
      '#withMessage_key_key':: d.fn(help='', args=[d.arg(name='message_key_key', type=d.T.string)]),
      withMessage_key_key(message_key_key): { spec+: { kafka+: { message_key_key: message_key_key } } },
      '#withPartition_key':: d.fn(help='', args=[d.arg(name='partition_key', type=d.T.string)]),
      withPartition_key(partition_key): { spec+: { kafka+: { partition_key: partition_key } } },
      '#withPartition_key_key':: d.fn(help='', args=[d.arg(name='partition_key_key', type=d.T.string)]),
      withPartition_key_key(partition_key_key): { spec+: { kafka+: { partition_key_key: partition_key_key } } },
      '#withPrincipal':: d.fn(help='', args=[d.arg(name='principal', type=d.T.string)]),
      withPrincipal(principal): { spec+: { kafka+: { principal: principal } } },
      '#withRequired_acks':: d.fn(help='', args=[d.arg(name='required_acks', type=d.T.integer)]),
      withRequired_acks(required_acks): { spec+: { kafka+: { required_acks: required_acks } } },
      '#withSasl_over_ssl':: d.fn(help='', args=[d.arg(name='sasl_over_ssl', type=d.T.boolean)]),
      withSasl_over_ssl(sasl_over_ssl): { spec+: { kafka+: { sasl_over_ssl: sasl_over_ssl } } },
      '#withScram_mechanism':: d.fn(help='', args=[d.arg(name='scram_mechanism', type=d.T.string)]),
      withScram_mechanism(scram_mechanism): { spec+: { kafka+: { scram_mechanism: scram_mechanism } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { kafka+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSsl_ca_certs_from_system':: d.fn(help='', args=[d.arg(name='ssl_ca_certs_from_system', type=d.T.boolean)]),
      withSsl_ca_certs_from_system(ssl_ca_certs_from_system): { spec+: { kafka+: { ssl_ca_certs_from_system: ssl_ca_certs_from_system } } },
      '#withSsl_verify_hostname':: d.fn(help='', args=[d.arg(name='ssl_verify_hostname', type=d.T.boolean)]),
      withSsl_verify_hostname(ssl_verify_hostname): { spec+: { kafka+: { ssl_verify_hostname: ssl_verify_hostname } } },
      '#withTopic_key':: d.fn(help='', args=[d.arg(name='topic_key', type=d.T.string)]),
      withTopic_key(topic_key): { spec+: { kafka+: { topic_key: topic_key } } },
      '#withUse_default_for_unknown_topic':: d.fn(help='', args=[d.arg(name='use_default_for_unknown_topic', type=d.T.boolean)]),
      withUse_default_for_unknown_topic(use_default_for_unknown_topic): { spec+: { kafka+: { use_default_for_unknown_topic: use_default_for_unknown_topic } } },
    },
    '#kinesisStream':: d.obj(help=''),
    kinesisStream: {
      '#assume_role_credentials':: d.obj(help=''),
      assume_role_credentials: {
        '#withDuration_seconds':: d.fn(help='', args=[d.arg(name='duration_seconds', type=d.T.string)]),
        withDuration_seconds(duration_seconds): { spec+: { kinesisStream+: { assume_role_credentials+: { duration_seconds: duration_seconds } } } },
        '#withExternal_id':: d.fn(help='', args=[d.arg(name='external_id', type=d.T.string)]),
        withExternal_id(external_id): { spec+: { kinesisStream+: { assume_role_credentials+: { external_id: external_id } } } },
        '#withPolicy':: d.fn(help='', args=[d.arg(name='policy', type=d.T.string)]),
        withPolicy(policy): { spec+: { kinesisStream+: { assume_role_credentials+: { policy: policy } } } },
        '#withRole_arn':: d.fn(help='', args=[d.arg(name='role_arn', type=d.T.string)]),
        withRole_arn(role_arn): { spec+: { kinesisStream+: { assume_role_credentials+: { role_arn: role_arn } } } },
        '#withRole_session_name':: d.fn(help='', args=[d.arg(name='role_session_name', type=d.T.string)]),
        withRole_session_name(role_session_name): { spec+: { kinesisStream+: { assume_role_credentials+: { role_session_name: role_session_name } } } },
      },
      '#aws_key_id':: d.obj(help=''),
      aws_key_id: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kinesisStream+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kinesisStream+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kinesisStream+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kinesisStream+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kinesisStream+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kinesisStream+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kinesisStream+: { aws_key_id+: { value: value } } } },
      },
      '#aws_sec_key':: d.obj(help=''),
      aws_sec_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kinesisStream+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kinesisStream+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kinesisStream+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kinesisStream+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kinesisStream+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kinesisStream+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kinesisStream+: { aws_sec_key+: { value: value } } } },
      },
      '#aws_ses_token':: d.obj(help=''),
      aws_ses_token: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kinesisStream+: { aws_ses_token+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kinesisStream+: { aws_ses_token+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kinesisStream+: { aws_ses_token+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kinesisStream+: { aws_ses_token+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kinesisStream+: { aws_ses_token+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kinesisStream+: { aws_ses_token+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { kinesisStream+: { aws_ses_token+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { kinesisStream+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { kinesisStream+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { kinesisStream+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { kinesisStream+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { kinesisStream+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { kinesisStream+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { kinesisStream+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { kinesisStream+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { kinesisStream+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { kinesisStream+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { kinesisStream+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { kinesisStream+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { kinesisStream+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { kinesisStream+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { kinesisStream+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { kinesisStream+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { kinesisStream+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { kinesisStream+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { kinesisStream+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { kinesisStream+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { kinesisStream+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { kinesisStream+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { kinesisStream+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { kinesisStream+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { kinesisStream+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { kinesisStream+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { kinesisStream+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { kinesisStream+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { kinesisStream+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { kinesisStream+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { kinesisStream+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { kinesisStream+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kinesisStream+: { buffer+: { type: type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { kinesisStream+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { kinesisStream+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kinesisStream+: { format+: { type: type } } } },
      },
      '#process_credentials':: d.obj(help=''),
      process_credentials: {
        '#withProcess':: d.fn(help='', args=[d.arg(name='process', type=d.T.string)]),
        withProcess(process): { spec+: { kinesisStream+: { process_credentials+: { process: process } } } },
      },
      '#withAws_iam_retries':: d.fn(help='', args=[d.arg(name='aws_iam_retries', type=d.T.integer)]),
      withAws_iam_retries(aws_iam_retries): { spec+: { kinesisStream+: { aws_iam_retries: aws_iam_retries } } },
      '#withBatch_request_max_count':: d.fn(help='', args=[d.arg(name='batch_request_max_count', type=d.T.integer)]),
      withBatch_request_max_count(batch_request_max_count): { spec+: { kinesisStream+: { batch_request_max_count: batch_request_max_count } } },
      '#withBatch_request_max_size':: d.fn(help='', args=[d.arg(name='batch_request_max_size', type=d.T.integer)]),
      withBatch_request_max_size(batch_request_max_size): { spec+: { kinesisStream+: { batch_request_max_size: batch_request_max_size } } },
      '#withPartition_key':: d.fn(help='', args=[d.arg(name='partition_key', type=d.T.string)]),
      withPartition_key(partition_key): { spec+: { kinesisStream+: { partition_key: partition_key } } },
      '#withRegion':: d.fn(help='', args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { spec+: { kinesisStream+: { region: region } } },
      '#withReset_backoff_if_success':: d.fn(help='', args=[d.arg(name='reset_backoff_if_success', type=d.T.boolean)]),
      withReset_backoff_if_success(reset_backoff_if_success): { spec+: { kinesisStream+: { reset_backoff_if_success: reset_backoff_if_success } } },
      '#withRetries_on_batch_request':: d.fn(help='', args=[d.arg(name='retries_on_batch_request', type=d.T.integer)]),
      withRetries_on_batch_request(retries_on_batch_request): { spec+: { kinesisStream+: { retries_on_batch_request: retries_on_batch_request } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { kinesisStream+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withStream_name':: d.fn(help='', args=[d.arg(name='stream_name', type=d.T.string)]),
      withStream_name(stream_name): { spec+: { kinesisStream+: { stream_name: stream_name } } },
    },
    '#logdna':: d.obj(help=''),
    logdna: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { logdna+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { logdna+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { logdna+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { logdna+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { logdna+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { logdna+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { logdna+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { logdna+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { logdna+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { logdna+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { logdna+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { logdna+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { logdna+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { logdna+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { logdna+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { logdna+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { logdna+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { logdna+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { logdna+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { logdna+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { logdna+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { logdna+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { logdna+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { logdna+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { logdna+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { logdna+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { logdna+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { logdna+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { logdna+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { logdna+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { logdna+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { logdna+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { logdna+: { buffer+: { type: type } } } },
      },
      '#withApi_key':: d.fn(help='', args=[d.arg(name='api_key', type=d.T.string)]),
      withApi_key(api_key): { spec+: { logdna+: { api_key: api_key } } },
      '#withApp':: d.fn(help='', args=[d.arg(name='app', type=d.T.string)]),
      withApp(app): { spec+: { logdna+: { app: app } } },
      '#withHostname':: d.fn(help='', args=[d.arg(name='hostname', type=d.T.string)]),
      withHostname(hostname): { spec+: { logdna+: { hostname: hostname } } },
      '#withIngester_domain':: d.fn(help='', args=[d.arg(name='ingester_domain', type=d.T.string)]),
      withIngester_domain(ingester_domain): { spec+: { logdna+: { ingester_domain: ingester_domain } } },
      '#withIngester_endpoint':: d.fn(help='', args=[d.arg(name='ingester_endpoint', type=d.T.string)]),
      withIngester_endpoint(ingester_endpoint): { spec+: { logdna+: { ingester_endpoint: ingester_endpoint } } },
      '#withRequest_timeout':: d.fn(help='', args=[d.arg(name='request_timeout', type=d.T.string)]),
      withRequest_timeout(request_timeout): { spec+: { logdna+: { request_timeout: request_timeout } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { logdna+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
      withTags(tags): { spec+: { logdna+: { tags: tags } } },
    },
    '#logz':: d.obj(help=''),
    logz: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { logz+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { logz+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { logz+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { logz+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { logz+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { logz+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { logz+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { logz+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { logz+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { logz+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { logz+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { logz+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { logz+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { logz+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { logz+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { logz+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { logz+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { logz+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { logz+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { logz+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { logz+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { logz+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { logz+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { logz+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { logz+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { logz+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { logz+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { logz+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { logz+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { logz+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { logz+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { logz+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { logz+: { buffer+: { type: type } } } },
      },
      '#endpoint':: d.obj(help=''),
      endpoint: {
        '#token':: d.obj(help=''),
        token: {
          '#mountFrom':: d.obj(help=''),
          mountFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { logz+: { endpoint+: { token+: { mountFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { logz+: { endpoint+: { token+: { mountFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { logz+: { endpoint+: { token+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { logz+: { endpoint+: { token+: { valueFrom+: { secretKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { logz+: { endpoint+: { token+: { valueFrom+: { secretKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { logz+: { endpoint+: { token+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { spec+: { logz+: { endpoint+: { token+: { value: value } } } } },
        },
        '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { spec+: { logz+: { endpoint+: { port: port } } } },
        '#withUrl':: d.fn(help='', args=[d.arg(name='url', type=d.T.string)]),
        withUrl(url): { spec+: { logz+: { endpoint+: { url: url } } } },
      },
      '#withBulk_limit':: d.fn(help='', args=[d.arg(name='bulk_limit', type=d.T.integer)]),
      withBulk_limit(bulk_limit): { spec+: { logz+: { bulk_limit: bulk_limit } } },
      '#withBulk_limit_warning_limit':: d.fn(help='', args=[d.arg(name='bulk_limit_warning_limit', type=d.T.integer)]),
      withBulk_limit_warning_limit(bulk_limit_warning_limit): { spec+: { logz+: { bulk_limit_warning_limit: bulk_limit_warning_limit } } },
      '#withGzip':: d.fn(help='', args=[d.arg(name='gzip', type=d.T.boolean)]),
      withGzip(gzip): { spec+: { logz+: { gzip: gzip } } },
      '#withHttp_idle_timeout':: d.fn(help='', args=[d.arg(name='http_idle_timeout', type=d.T.integer)]),
      withHttp_idle_timeout(http_idle_timeout): { spec+: { logz+: { http_idle_timeout: http_idle_timeout } } },
      '#withOutput_include_tags':: d.fn(help='', args=[d.arg(name='output_include_tags', type=d.T.boolean)]),
      withOutput_include_tags(output_include_tags): { spec+: { logz+: { output_include_tags: output_include_tags } } },
      '#withOutput_include_time':: d.fn(help='', args=[d.arg(name='output_include_time', type=d.T.boolean)]),
      withOutput_include_time(output_include_time): { spec+: { logz+: { output_include_time: output_include_time } } },
      '#withRetry_count':: d.fn(help='', args=[d.arg(name='retry_count', type=d.T.integer)]),
      withRetry_count(retry_count): { spec+: { logz+: { retry_count: retry_count } } },
      '#withRetry_sleep':: d.fn(help='', args=[d.arg(name='retry_sleep', type=d.T.integer)]),
      withRetry_sleep(retry_sleep): { spec+: { logz+: { retry_sleep: retry_sleep } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { logz+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
    },
    '#loki':: d.obj(help=''),
    loki: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { loki+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { loki+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { loki+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { loki+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { loki+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { loki+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { loki+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { loki+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { loki+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { loki+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { loki+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { loki+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { loki+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { loki+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { loki+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { loki+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { loki+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { loki+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { loki+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { loki+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { loki+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { loki+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { loki+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { loki+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { loki+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { loki+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { loki+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { loki+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { loki+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { loki+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { loki+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { loki+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { loki+: { buffer+: { type: type } } } },
      },
      '#ca_cert':: d.obj(help=''),
      ca_cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { ca_cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { ca_cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { ca_cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { ca_cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { ca_cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { ca_cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { loki+: { ca_cert+: { value: value } } } },
      },
      '#cert':: d.obj(help=''),
      cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { loki+: { cert+: { value: value } } } },
      },
      '#key':: d.obj(help=''),
      key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { loki+: { key+: { value: value } } } },
      },
      '#password':: d.obj(help=''),
      password: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { password+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { password+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { password+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { password+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { loki+: { password+: { value: value } } } },
      },
      '#username':: d.obj(help=''),
      username: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { username+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { username+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { username+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { loki+: { username+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { loki+: { username+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { loki+: { username+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { loki+: { username+: { value: value } } } },
      },
      '#withConfigure_kubernetes_labels':: d.fn(help='', args=[d.arg(name='configure_kubernetes_labels', type=d.T.boolean)]),
      withConfigure_kubernetes_labels(configure_kubernetes_labels): { spec+: { loki+: { configure_kubernetes_labels: configure_kubernetes_labels } } },
      '#withDrop_single_key':: d.fn(help='', args=[d.arg(name='drop_single_key', type=d.T.boolean)]),
      withDrop_single_key(drop_single_key): { spec+: { loki+: { drop_single_key: drop_single_key } } },
      '#withExtra_labels':: d.fn(help='', args=[d.arg(name='extra_labels', type=d.T.object)]),
      withExtra_labels(extra_labels): { spec+: { loki+: { extra_labels: extra_labels } } },
      '#withExtra_labelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extra_labels', type=d.T.object)]),
      withExtra_labelsMixin(extra_labels): { spec+: { loki+: { extra_labels+: extra_labels } } },
      '#withExtract_kubernetes_labels':: d.fn(help='', args=[d.arg(name='extract_kubernetes_labels', type=d.T.boolean)]),
      withExtract_kubernetes_labels(extract_kubernetes_labels): { spec+: { loki+: { extract_kubernetes_labels: extract_kubernetes_labels } } },
      '#withInsecure_tls':: d.fn(help='', args=[d.arg(name='insecure_tls', type=d.T.boolean)]),
      withInsecure_tls(insecure_tls): { spec+: { loki+: { insecure_tls: insecure_tls } } },
      '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
      withLabels(labels): { spec+: { loki+: { labels: labels } } },
      '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
      withLabelsMixin(labels): { spec+: { loki+: { labels+: labels } } },
      '#withLine_format':: d.fn(help='', args=[d.arg(name='line_format', type=d.T.string)]),
      withLine_format(line_format): { spec+: { loki+: { line_format: line_format } } },
      '#withRemove_keys':: d.fn(help='', args=[d.arg(name='remove_keys', type=d.T.array)]),
      withRemove_keys(remove_keys): { spec+: { loki+: { remove_keys: if std.isArray(v=remove_keys) then remove_keys else [remove_keys] } } },
      '#withRemove_keysMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='remove_keys', type=d.T.array)]),
      withRemove_keysMixin(remove_keys): { spec+: { loki+: { remove_keys+: if std.isArray(v=remove_keys) then remove_keys else [remove_keys] } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { loki+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withTenant':: d.fn(help='', args=[d.arg(name='tenant', type=d.T.string)]),
      withTenant(tenant): { spec+: { loki+: { tenant: tenant } } },
      '#withUrl':: d.fn(help='', args=[d.arg(name='url', type=d.T.string)]),
      withUrl(url): { spec+: { loki+: { url: url } } },
    },
    '#newrelic':: d.obj(help=''),
    newrelic: {
      '#api_key':: d.obj(help=''),
      api_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { newrelic+: { api_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { newrelic+: { api_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { newrelic+: { api_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { newrelic+: { api_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { newrelic+: { api_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { newrelic+: { api_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { newrelic+: { api_key+: { value: value } } } },
      },
      '#license_key':: d.obj(help=''),
      license_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { newrelic+: { license_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { newrelic+: { license_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { newrelic+: { license_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { newrelic+: { license_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { newrelic+: { license_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { newrelic+: { license_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { newrelic+: { license_key+: { value: value } } } },
      },
      '#withBase_uri':: d.fn(help='', args=[d.arg(name='base_uri', type=d.T.string)]),
      withBase_uri(base_uri): { spec+: { newrelic+: { base_uri: base_uri } } },
    },
    '#opensearch':: d.obj(help=''),
    opensearch: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { opensearch+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { opensearch+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { opensearch+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { opensearch+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { opensearch+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { opensearch+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { opensearch+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { opensearch+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { opensearch+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { opensearch+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { opensearch+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { opensearch+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { opensearch+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { opensearch+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { opensearch+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { opensearch+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { opensearch+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { opensearch+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { opensearch+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { opensearch+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { opensearch+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { opensearch+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { opensearch+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { opensearch+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { opensearch+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { opensearch+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { opensearch+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { opensearch+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { opensearch+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { opensearch+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { opensearch+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { opensearch+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { opensearch+: { buffer+: { type: type } } } },
      },
      '#ca_file':: d.obj(help=''),
      ca_file: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { ca_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { ca_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { opensearch+: { ca_file+: { value: value } } } },
      },
      '#client_cert':: d.obj(help=''),
      client_cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { client_cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { client_cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { opensearch+: { client_cert+: { value: value } } } },
      },
      '#client_key':: d.obj(help=''),
      client_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { client_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { client_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { client_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { client_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { client_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { client_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { opensearch+: { client_key+: { value: value } } } },
      },
      '#client_key_pass':: d.obj(help=''),
      client_key_pass: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { client_key_pass+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { client_key_pass+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { opensearch+: { client_key_pass+: { value: value } } } },
      },
      '#password':: d.obj(help=''),
      password: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { password+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { password+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { password+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { password+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { opensearch+: { password+: { value: value } } } },
      },
      '#template_file':: d.obj(help=''),
      template_file: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { template_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { template_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { template_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { opensearch+: { template_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { opensearch+: { template_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { opensearch+: { template_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { opensearch+: { template_file+: { value: value } } } },
      },
      '#withApplication_name':: d.fn(help='', args=[d.arg(name='application_name', type=d.T.string)]),
      withApplication_name(application_name): { spec+: { opensearch+: { application_name: application_name } } },
      '#withBulk_message_request_threshold':: d.fn(help='', args=[d.arg(name='bulk_message_request_threshold', type=d.T.string)]),
      withBulk_message_request_threshold(bulk_message_request_threshold): { spec+: { opensearch+: { bulk_message_request_threshold: bulk_message_request_threshold } } },
      '#withCatch_transport_exception_on_retry':: d.fn(help='', args=[d.arg(name='catch_transport_exception_on_retry', type=d.T.boolean)]),
      withCatch_transport_exception_on_retry(catch_transport_exception_on_retry): { spec+: { opensearch+: { catch_transport_exception_on_retry: catch_transport_exception_on_retry } } },
      '#withCompression_level':: d.fn(help='', args=[d.arg(name='compression_level', type=d.T.string)]),
      withCompression_level(compression_level): { spec+: { opensearch+: { compression_level: compression_level } } },
      '#withCustom_headers':: d.fn(help='', args=[d.arg(name='custom_headers', type=d.T.string)]),
      withCustom_headers(custom_headers): { spec+: { opensearch+: { custom_headers: custom_headers } } },
      '#withCustomize_template':: d.fn(help='', args=[d.arg(name='customize_template', type=d.T.string)]),
      withCustomize_template(customize_template): { spec+: { opensearch+: { customize_template: customize_template } } },
      '#withDefault_opensearch_version':: d.fn(help='', args=[d.arg(name='default_opensearch_version', type=d.T.integer)]),
      withDefault_opensearch_version(default_opensearch_version): { spec+: { opensearch+: { default_opensearch_version: default_opensearch_version } } },
      '#withEmit_error_for_missing_id':: d.fn(help='', args=[d.arg(name='emit_error_for_missing_id', type=d.T.boolean)]),
      withEmit_error_for_missing_id(emit_error_for_missing_id): { spec+: { opensearch+: { emit_error_for_missing_id: emit_error_for_missing_id } } },
      '#withEmit_error_label_event':: d.fn(help='', args=[d.arg(name='emit_error_label_event', type=d.T.boolean)]),
      withEmit_error_label_event(emit_error_label_event): { spec+: { opensearch+: { emit_error_label_event: emit_error_label_event } } },
      '#withException_backup':: d.fn(help='', args=[d.arg(name='exception_backup', type=d.T.boolean)]),
      withException_backup(exception_backup): { spec+: { opensearch+: { exception_backup: exception_backup } } },
      '#withFail_on_detecting_os_version_retry_exceed':: d.fn(help='', args=[d.arg(name='fail_on_detecting_os_version_retry_exceed', type=d.T.boolean)]),
      withFail_on_detecting_os_version_retry_exceed(fail_on_detecting_os_version_retry_exceed): { spec+: { opensearch+: { fail_on_detecting_os_version_retry_exceed: fail_on_detecting_os_version_retry_exceed } } },
      '#withFail_on_putting_template_retry_exceed':: d.fn(help='', args=[d.arg(name='fail_on_putting_template_retry_exceed', type=d.T.boolean)]),
      withFail_on_putting_template_retry_exceed(fail_on_putting_template_retry_exceed): { spec+: { opensearch+: { fail_on_putting_template_retry_exceed: fail_on_putting_template_retry_exceed } } },
      '#withFlatten_hashes':: d.fn(help='', args=[d.arg(name='flatten_hashes', type=d.T.boolean)]),
      withFlatten_hashes(flatten_hashes): { spec+: { opensearch+: { flatten_hashes: flatten_hashes } } },
      '#withFlatten_hashes_separator':: d.fn(help='', args=[d.arg(name='flatten_hashes_separator', type=d.T.string)]),
      withFlatten_hashes_separator(flatten_hashes_separator): { spec+: { opensearch+: { flatten_hashes_separator: flatten_hashes_separator } } },
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { opensearch+: { host: host } } },
      '#withHosts':: d.fn(help='', args=[d.arg(name='hosts', type=d.T.string)]),
      withHosts(hosts): { spec+: { opensearch+: { hosts: hosts } } },
      '#withHttp_backend':: d.fn(help='', args=[d.arg(name='http_backend', type=d.T.string)]),
      withHttp_backend(http_backend): { spec+: { opensearch+: { http_backend: http_backend } } },
      '#withHttp_backend_excon_nonblock':: d.fn(help='', args=[d.arg(name='http_backend_excon_nonblock', type=d.T.boolean)]),
      withHttp_backend_excon_nonblock(http_backend_excon_nonblock): { spec+: { opensearch+: { http_backend_excon_nonblock: http_backend_excon_nonblock } } },
      '#withId_key':: d.fn(help='', args=[d.arg(name='id_key', type=d.T.string)]),
      withId_key(id_key): { spec+: { opensearch+: { id_key: id_key } } },
      '#withIgnore_exceptions':: d.fn(help='', args=[d.arg(name='ignore_exceptions', type=d.T.string)]),
      withIgnore_exceptions(ignore_exceptions): { spec+: { opensearch+: { ignore_exceptions: ignore_exceptions } } },
      '#withInclude_index_in_url':: d.fn(help='', args=[d.arg(name='include_index_in_url', type=d.T.boolean)]),
      withInclude_index_in_url(include_index_in_url): { spec+: { opensearch+: { include_index_in_url: include_index_in_url } } },
      '#withInclude_tag_key':: d.fn(help='', args=[d.arg(name='include_tag_key', type=d.T.boolean)]),
      withInclude_tag_key(include_tag_key): { spec+: { opensearch+: { include_tag_key: include_tag_key } } },
      '#withInclude_timestamp':: d.fn(help='', args=[d.arg(name='include_timestamp', type=d.T.boolean)]),
      withInclude_timestamp(include_timestamp): { spec+: { opensearch+: { include_timestamp: include_timestamp } } },
      '#withIndex_date_pattern':: d.fn(help='', args=[d.arg(name='index_date_pattern', type=d.T.string)]),
      withIndex_date_pattern(index_date_pattern): { spec+: { opensearch+: { index_date_pattern: index_date_pattern } } },
      '#withIndex_name':: d.fn(help='', args=[d.arg(name='index_name', type=d.T.string)]),
      withIndex_name(index_name): { spec+: { opensearch+: { index_name: index_name } } },
      '#withIndex_separator':: d.fn(help='', args=[d.arg(name='index_separator', type=d.T.string)]),
      withIndex_separator(index_separator): { spec+: { opensearch+: { index_separator: index_separator } } },
      '#withLog_os_400_reason':: d.fn(help='', args=[d.arg(name='log_os_400_reason', type=d.T.boolean)]),
      withLog_os_400_reason(log_os_400_reason): { spec+: { opensearch+: { log_os_400_reason: log_os_400_reason } } },
      '#withLogstash_dateformat':: d.fn(help='', args=[d.arg(name='logstash_dateformat', type=d.T.string)]),
      withLogstash_dateformat(logstash_dateformat): { spec+: { opensearch+: { logstash_dateformat: logstash_dateformat } } },
      '#withLogstash_format':: d.fn(help='', args=[d.arg(name='logstash_format', type=d.T.boolean)]),
      withLogstash_format(logstash_format): { spec+: { opensearch+: { logstash_format: logstash_format } } },
      '#withLogstash_prefix':: d.fn(help='', args=[d.arg(name='logstash_prefix', type=d.T.string)]),
      withLogstash_prefix(logstash_prefix): { spec+: { opensearch+: { logstash_prefix: logstash_prefix } } },
      '#withLogstash_prefix_separator':: d.fn(help='', args=[d.arg(name='logstash_prefix_separator', type=d.T.string)]),
      withLogstash_prefix_separator(logstash_prefix_separator): { spec+: { opensearch+: { logstash_prefix_separator: logstash_prefix_separator } } },
      '#withMax_retry_get_os_version':: d.fn(help='', args=[d.arg(name='max_retry_get_os_version', type=d.T.integer)]),
      withMax_retry_get_os_version(max_retry_get_os_version): { spec+: { opensearch+: { max_retry_get_os_version: max_retry_get_os_version } } },
      '#withMax_retry_putting_template':: d.fn(help='', args=[d.arg(name='max_retry_putting_template', type=d.T.string)]),
      withMax_retry_putting_template(max_retry_putting_template): { spec+: { opensearch+: { max_retry_putting_template: max_retry_putting_template } } },
      '#withParent_key':: d.fn(help='', args=[d.arg(name='parent_key', type=d.T.string)]),
      withParent_key(parent_key): { spec+: { opensearch+: { parent_key: parent_key } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { opensearch+: { path: path } } },
      '#withPipeline':: d.fn(help='', args=[d.arg(name='pipeline', type=d.T.string)]),
      withPipeline(pipeline): { spec+: { opensearch+: { pipeline: pipeline } } },
      '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { opensearch+: { port: port } } },
      '#withPrefer_oj_serializer':: d.fn(help='', args=[d.arg(name='prefer_oj_serializer', type=d.T.boolean)]),
      withPrefer_oj_serializer(prefer_oj_serializer): { spec+: { opensearch+: { prefer_oj_serializer: prefer_oj_serializer } } },
      '#withReconnect_on_error':: d.fn(help='', args=[d.arg(name='reconnect_on_error', type=d.T.boolean)]),
      withReconnect_on_error(reconnect_on_error): { spec+: { opensearch+: { reconnect_on_error: reconnect_on_error } } },
      '#withReload_after':: d.fn(help='', args=[d.arg(name='reload_after', type=d.T.string)]),
      withReload_after(reload_after): { spec+: { opensearch+: { reload_after: reload_after } } },
      '#withReload_connections':: d.fn(help='', args=[d.arg(name='reload_connections', type=d.T.boolean)]),
      withReload_connections(reload_connections): { spec+: { opensearch+: { reload_connections: reload_connections } } },
      '#withReload_on_failure':: d.fn(help='', args=[d.arg(name='reload_on_failure', type=d.T.boolean)]),
      withReload_on_failure(reload_on_failure): { spec+: { opensearch+: { reload_on_failure: reload_on_failure } } },
      '#withRemove_keys_on_update':: d.fn(help='', args=[d.arg(name='remove_keys_on_update', type=d.T.string)]),
      withRemove_keys_on_update(remove_keys_on_update): { spec+: { opensearch+: { remove_keys_on_update: remove_keys_on_update } } },
      '#withRemove_keys_on_update_key':: d.fn(help='', args=[d.arg(name='remove_keys_on_update_key', type=d.T.string)]),
      withRemove_keys_on_update_key(remove_keys_on_update_key): { spec+: { opensearch+: { remove_keys_on_update_key: remove_keys_on_update_key } } },
      '#withRequest_timeout':: d.fn(help='', args=[d.arg(name='request_timeout', type=d.T.string)]),
      withRequest_timeout(request_timeout): { spec+: { opensearch+: { request_timeout: request_timeout } } },
      '#withResurrect_after':: d.fn(help='', args=[d.arg(name='resurrect_after', type=d.T.string)]),
      withResurrect_after(resurrect_after): { spec+: { opensearch+: { resurrect_after: resurrect_after } } },
      '#withRetry_tag':: d.fn(help='', args=[d.arg(name='retry_tag', type=d.T.string)]),
      withRetry_tag(retry_tag): { spec+: { opensearch+: { retry_tag: retry_tag } } },
      '#withRouting_key':: d.fn(help='', args=[d.arg(name='routing_key', type=d.T.string)]),
      withRouting_key(routing_key): { spec+: { opensearch+: { routing_key: routing_key } } },
      '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
      withScheme(scheme): { spec+: { opensearch+: { scheme: scheme } } },
      '#withSelector_class_name':: d.fn(help='', args=[d.arg(name='selector_class_name', type=d.T.string)]),
      withSelector_class_name(selector_class_name): { spec+: { opensearch+: { selector_class_name: selector_class_name } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { opensearch+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSniffer_class_name':: d.fn(help='', args=[d.arg(name='sniffer_class_name', type=d.T.string)]),
      withSniffer_class_name(sniffer_class_name): { spec+: { opensearch+: { sniffer_class_name: sniffer_class_name } } },
      '#withSsl_verify':: d.fn(help='', args=[d.arg(name='ssl_verify', type=d.T.boolean)]),
      withSsl_verify(ssl_verify): { spec+: { opensearch+: { ssl_verify: ssl_verify } } },
      '#withSuppress_doc_wrap':: d.fn(help='', args=[d.arg(name='suppress_doc_wrap', type=d.T.boolean)]),
      withSuppress_doc_wrap(suppress_doc_wrap): { spec+: { opensearch+: { suppress_doc_wrap: suppress_doc_wrap } } },
      '#withSuppress_type_name':: d.fn(help='', args=[d.arg(name='suppress_type_name', type=d.T.boolean)]),
      withSuppress_type_name(suppress_type_name): { spec+: { opensearch+: { suppress_type_name: suppress_type_name } } },
      '#withTag_key':: d.fn(help='', args=[d.arg(name='tag_key', type=d.T.string)]),
      withTag_key(tag_key): { spec+: { opensearch+: { tag_key: tag_key } } },
      '#withTarget_index_affinity':: d.fn(help='', args=[d.arg(name='target_index_affinity', type=d.T.boolean)]),
      withTarget_index_affinity(target_index_affinity): { spec+: { opensearch+: { target_index_affinity: target_index_affinity } } },
      '#withTarget_index_key':: d.fn(help='', args=[d.arg(name='target_index_key', type=d.T.string)]),
      withTarget_index_key(target_index_key): { spec+: { opensearch+: { target_index_key: target_index_key } } },
      '#withTemplate_name':: d.fn(help='', args=[d.arg(name='template_name', type=d.T.string)]),
      withTemplate_name(template_name): { spec+: { opensearch+: { template_name: template_name } } },
      '#withTemplate_overwrite':: d.fn(help='', args=[d.arg(name='template_overwrite', type=d.T.boolean)]),
      withTemplate_overwrite(template_overwrite): { spec+: { opensearch+: { template_overwrite: template_overwrite } } },
      '#withTemplates':: d.fn(help='', args=[d.arg(name='templates', type=d.T.string)]),
      withTemplates(templates): { spec+: { opensearch+: { templates: templates } } },
      '#withTime_key':: d.fn(help='', args=[d.arg(name='time_key', type=d.T.string)]),
      withTime_key(time_key): { spec+: { opensearch+: { time_key: time_key } } },
      '#withTime_key_exclude_timestamp':: d.fn(help='', args=[d.arg(name='time_key_exclude_timestamp', type=d.T.boolean)]),
      withTime_key_exclude_timestamp(time_key_exclude_timestamp): { spec+: { opensearch+: { time_key_exclude_timestamp: time_key_exclude_timestamp } } },
      '#withTime_key_format':: d.fn(help='', args=[d.arg(name='time_key_format', type=d.T.string)]),
      withTime_key_format(time_key_format): { spec+: { opensearch+: { time_key_format: time_key_format } } },
      '#withTime_parse_error_tag':: d.fn(help='', args=[d.arg(name='time_parse_error_tag', type=d.T.string)]),
      withTime_parse_error_tag(time_parse_error_tag): { spec+: { opensearch+: { time_parse_error_tag: time_parse_error_tag } } },
      '#withTime_precision':: d.fn(help='', args=[d.arg(name='time_precision', type=d.T.string)]),
      withTime_precision(time_precision): { spec+: { opensearch+: { time_precision: time_precision } } },
      '#withTruncate_caches_interval':: d.fn(help='', args=[d.arg(name='truncate_caches_interval', type=d.T.string)]),
      withTruncate_caches_interval(truncate_caches_interval): { spec+: { opensearch+: { truncate_caches_interval: truncate_caches_interval } } },
      '#withUnrecoverable_error_types':: d.fn(help='', args=[d.arg(name='unrecoverable_error_types', type=d.T.string)]),
      withUnrecoverable_error_types(unrecoverable_error_types): { spec+: { opensearch+: { unrecoverable_error_types: unrecoverable_error_types } } },
      '#withUnrecoverable_record_types':: d.fn(help='', args=[d.arg(name='unrecoverable_record_types', type=d.T.string)]),
      withUnrecoverable_record_types(unrecoverable_record_types): { spec+: { opensearch+: { unrecoverable_record_types: unrecoverable_record_types } } },
      '#withUse_legacy_template':: d.fn(help='', args=[d.arg(name='use_legacy_template', type=d.T.boolean)]),
      withUse_legacy_template(use_legacy_template): { spec+: { opensearch+: { use_legacy_template: use_legacy_template } } },
      '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
      withUser(user): { spec+: { opensearch+: { user: user } } },
      '#withUtc_index':: d.fn(help='', args=[d.arg(name='utc_index', type=d.T.boolean)]),
      withUtc_index(utc_index): { spec+: { opensearch+: { utc_index: utc_index } } },
      '#withValidate_client_version':: d.fn(help='', args=[d.arg(name='validate_client_version', type=d.T.boolean)]),
      withValidate_client_version(validate_client_version): { spec+: { opensearch+: { validate_client_version: validate_client_version } } },
      '#withVerify_os_version_at_startup':: d.fn(help='', args=[d.arg(name='verify_os_version_at_startup', type=d.T.boolean)]),
      withVerify_os_version_at_startup(verify_os_version_at_startup): { spec+: { opensearch+: { verify_os_version_at_startup: verify_os_version_at_startup } } },
      '#withWith_transporter_log':: d.fn(help='', args=[d.arg(name='with_transporter_log', type=d.T.boolean)]),
      withWith_transporter_log(with_transporter_log): { spec+: { opensearch+: { with_transporter_log: with_transporter_log } } },
      '#withWrite_operation':: d.fn(help='', args=[d.arg(name='write_operation', type=d.T.string)]),
      withWrite_operation(write_operation): { spec+: { opensearch+: { write_operation: write_operation } } },
    },
    '#oss':: d.obj(help=''),
    oss: {
      '#aaccess_key_secret':: d.obj(help=''),
      aaccess_key_secret: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { oss+: { aaccess_key_secret+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { oss+: { aaccess_key_secret+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { oss+: { aaccess_key_secret+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { oss+: { aaccess_key_secret+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { oss+: { aaccess_key_secret+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { oss+: { aaccess_key_secret+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { oss+: { aaccess_key_secret+: { value: value } } } },
      },
      '#access_key_id':: d.obj(help=''),
      access_key_id: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { oss+: { access_key_id+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { oss+: { access_key_id+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { oss+: { access_key_id+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { oss+: { access_key_id+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { oss+: { access_key_id+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { oss+: { access_key_id+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { oss+: { access_key_id+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { oss+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { oss+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { oss+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { oss+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { oss+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { oss+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { oss+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { oss+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { oss+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { oss+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { oss+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { oss+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { oss+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { oss+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { oss+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { oss+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { oss+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { oss+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { oss+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { oss+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { oss+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { oss+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { oss+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { oss+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { oss+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { oss+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { oss+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { oss+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { oss+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { oss+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { oss+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { oss+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { oss+: { buffer+: { type: type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { oss+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { oss+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { oss+: { format+: { type: type } } } },
      },
      '#withAuto_create_bucket':: d.fn(help='', args=[d.arg(name='auto_create_bucket', type=d.T.boolean)]),
      withAuto_create_bucket(auto_create_bucket): { spec+: { oss+: { auto_create_bucket: auto_create_bucket } } },
      '#withBucket':: d.fn(help='', args=[d.arg(name='bucket', type=d.T.string)]),
      withBucket(bucket): { spec+: { oss+: { bucket: bucket } } },
      '#withCheck_bucket':: d.fn(help='', args=[d.arg(name='check_bucket', type=d.T.boolean)]),
      withCheck_bucket(check_bucket): { spec+: { oss+: { check_bucket: check_bucket } } },
      '#withCheck_object':: d.fn(help='', args=[d.arg(name='check_object', type=d.T.boolean)]),
      withCheck_object(check_object): { spec+: { oss+: { check_object: check_object } } },
      '#withDownload_crc_enable':: d.fn(help='', args=[d.arg(name='download_crc_enable', type=d.T.boolean)]),
      withDownload_crc_enable(download_crc_enable): { spec+: { oss+: { download_crc_enable: download_crc_enable } } },
      '#withEndpoint':: d.fn(help='', args=[d.arg(name='endpoint', type=d.T.string)]),
      withEndpoint(endpoint): { spec+: { oss+: { endpoint: endpoint } } },
      '#withHex_random_length':: d.fn(help='', args=[d.arg(name='hex_random_length', type=d.T.integer)]),
      withHex_random_length(hex_random_length): { spec+: { oss+: { hex_random_length: hex_random_length } } },
      '#withIndex_format':: d.fn(help='', args=[d.arg(name='index_format', type=d.T.string)]),
      withIndex_format(index_format): { spec+: { oss+: { index_format: index_format } } },
      '#withKey_format':: d.fn(help='', args=[d.arg(name='key_format', type=d.T.string)]),
      withKey_format(key_format): { spec+: { oss+: { key_format: key_format } } },
      '#withOpen_timeout':: d.fn(help='', args=[d.arg(name='open_timeout', type=d.T.integer)]),
      withOpen_timeout(open_timeout): { spec+: { oss+: { open_timeout: open_timeout } } },
      '#withOss_sdk_log_dir':: d.fn(help='', args=[d.arg(name='oss_sdk_log_dir', type=d.T.string)]),
      withOss_sdk_log_dir(oss_sdk_log_dir): { spec+: { oss+: { oss_sdk_log_dir: oss_sdk_log_dir } } },
      '#withOverwrite':: d.fn(help='', args=[d.arg(name='overwrite', type=d.T.boolean)]),
      withOverwrite(overwrite): { spec+: { oss+: { overwrite: overwrite } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { oss+: { path: path } } },
      '#withRead_timeout':: d.fn(help='', args=[d.arg(name='read_timeout', type=d.T.integer)]),
      withRead_timeout(read_timeout): { spec+: { oss+: { read_timeout: read_timeout } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { oss+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withStore_as':: d.fn(help='', args=[d.arg(name='store_as', type=d.T.string)]),
      withStore_as(store_as): { spec+: { oss+: { store_as: store_as } } },
      '#withUpload_crc_enable':: d.fn(help='', args=[d.arg(name='upload_crc_enable', type=d.T.boolean)]),
      withUpload_crc_enable(upload_crc_enable): { spec+: { oss+: { upload_crc_enable: upload_crc_enable } } },
      '#withWarn_for_delay':: d.fn(help='', args=[d.arg(name='warn_for_delay', type=d.T.string)]),
      withWarn_for_delay(warn_for_delay): { spec+: { oss+: { warn_for_delay: warn_for_delay } } },
    },
    '#redis':: d.obj(help=''),
    redis: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { redis+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { redis+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { redis+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { redis+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { redis+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { redis+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { redis+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { redis+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { redis+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { redis+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { redis+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { redis+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { redis+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { redis+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { redis+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { redis+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { redis+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { redis+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { redis+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { redis+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { redis+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { redis+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { redis+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { redis+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { redis+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { redis+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { redis+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { redis+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { redis+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { redis+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { redis+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { redis+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { redis+: { buffer+: { type: type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { redis+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { redis+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { redis+: { format+: { type: type } } } },
      },
      '#password':: d.obj(help=''),
      password: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { redis+: { password+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { redis+: { password+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { redis+: { password+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { redis+: { password+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { redis+: { password+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { redis+: { password+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { redis+: { password+: { value: value } } } },
      },
      '#withAllow_duplicate_key':: d.fn(help='', args=[d.arg(name='allow_duplicate_key', type=d.T.boolean)]),
      withAllow_duplicate_key(allow_duplicate_key): { spec+: { redis+: { allow_duplicate_key: allow_duplicate_key } } },
      '#withDb_number':: d.fn(help='', args=[d.arg(name='db_number', type=d.T.integer)]),
      withDb_number(db_number): { spec+: { redis+: { db_number: db_number } } },
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { redis+: { host: host } } },
      '#withInsert_key_prefix':: d.fn(help='', args=[d.arg(name='insert_key_prefix', type=d.T.string)]),
      withInsert_key_prefix(insert_key_prefix): { spec+: { redis+: { insert_key_prefix: insert_key_prefix } } },
      '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { redis+: { port: port } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { redis+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withStrftime_format':: d.fn(help='', args=[d.arg(name='strftime_format', type=d.T.string)]),
      withStrftime_format(strftime_format): { spec+: { redis+: { strftime_format: strftime_format } } },
      '#withTtl':: d.fn(help='', args=[d.arg(name='ttl', type=d.T.integer)]),
      withTtl(ttl): { spec+: { redis+: { ttl: ttl } } },
    },
    '#s3':: d.obj(help=''),
    s3: {
      '#assume_role_credentials':: d.obj(help=''),
      assume_role_credentials: {
        '#withDuration_seconds':: d.fn(help='', args=[d.arg(name='duration_seconds', type=d.T.string)]),
        withDuration_seconds(duration_seconds): { spec+: { s3+: { assume_role_credentials+: { duration_seconds: duration_seconds } } } },
        '#withExternal_id':: d.fn(help='', args=[d.arg(name='external_id', type=d.T.string)]),
        withExternal_id(external_id): { spec+: { s3+: { assume_role_credentials+: { external_id: external_id } } } },
        '#withPolicy':: d.fn(help='', args=[d.arg(name='policy', type=d.T.string)]),
        withPolicy(policy): { spec+: { s3+: { assume_role_credentials+: { policy: policy } } } },
        '#withRole_arn':: d.fn(help='', args=[d.arg(name='role_arn', type=d.T.string)]),
        withRole_arn(role_arn): { spec+: { s3+: { assume_role_credentials+: { role_arn: role_arn } } } },
        '#withRole_session_name':: d.fn(help='', args=[d.arg(name='role_session_name', type=d.T.string)]),
        withRole_session_name(role_session_name): { spec+: { s3+: { assume_role_credentials+: { role_session_name: role_session_name } } } },
      },
      '#aws_key_id':: d.obj(help=''),
      aws_key_id: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { s3+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { s3+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { s3+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { s3+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { s3+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { s3+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { s3+: { aws_key_id+: { value: value } } } },
      },
      '#aws_sec_key':: d.obj(help=''),
      aws_sec_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { s3+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { s3+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { s3+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { s3+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { s3+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { s3+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { s3+: { aws_sec_key+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { s3+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { s3+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { s3+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { s3+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { s3+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { s3+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { s3+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { s3+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { s3+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { s3+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { s3+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { s3+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { s3+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { s3+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { s3+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { s3+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { s3+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { s3+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { s3+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { s3+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { s3+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { s3+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { s3+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { s3+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { s3+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { s3+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { s3+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { s3+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { s3+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { s3+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { s3+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { s3+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { s3+: { buffer+: { type: type } } } },
      },
      '#compress':: d.obj(help=''),
      compress: {
        '#withParquet_compression_codec':: d.fn(help='', args=[d.arg(name='parquet_compression_codec', type=d.T.string)]),
        withParquet_compression_codec(parquet_compression_codec): { spec+: { s3+: { compress+: { parquet_compression_codec: parquet_compression_codec } } } },
        '#withParquet_page_size':: d.fn(help='', args=[d.arg(name='parquet_page_size', type=d.T.string)]),
        withParquet_page_size(parquet_page_size): { spec+: { s3+: { compress+: { parquet_page_size: parquet_page_size } } } },
        '#withParquet_row_group_size':: d.fn(help='', args=[d.arg(name='parquet_row_group_size', type=d.T.string)]),
        withParquet_row_group_size(parquet_row_group_size): { spec+: { s3+: { compress+: { parquet_row_group_size: parquet_row_group_size } } } },
        '#withRecord_type':: d.fn(help='', args=[d.arg(name='record_type', type=d.T.string)]),
        withRecord_type(record_type): { spec+: { s3+: { compress+: { record_type: record_type } } } },
        '#withSchema_file':: d.fn(help='', args=[d.arg(name='schema_file', type=d.T.string)]),
        withSchema_file(schema_file): { spec+: { s3+: { compress+: { schema_file: schema_file } } } },
        '#withSchema_type':: d.fn(help='', args=[d.arg(name='schema_type', type=d.T.string)]),
        withSchema_type(schema_type): { spec+: { s3+: { compress+: { schema_type: schema_type } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { s3+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { s3+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { s3+: { format+: { type: type } } } },
      },
      '#instance_profile_credentials':: d.obj(help=''),
      instance_profile_credentials: {
        '#withHttp_open_timeout':: d.fn(help='', args=[d.arg(name='http_open_timeout', type=d.T.string)]),
        withHttp_open_timeout(http_open_timeout): { spec+: { s3+: { instance_profile_credentials+: { http_open_timeout: http_open_timeout } } } },
        '#withHttp_read_timeout':: d.fn(help='', args=[d.arg(name='http_read_timeout', type=d.T.string)]),
        withHttp_read_timeout(http_read_timeout): { spec+: { s3+: { instance_profile_credentials+: { http_read_timeout: http_read_timeout } } } },
        '#withIp_address':: d.fn(help='', args=[d.arg(name='ip_address', type=d.T.string)]),
        withIp_address(ip_address): { spec+: { s3+: { instance_profile_credentials+: { ip_address: ip_address } } } },
        '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.string)]),
        withPort(port): { spec+: { s3+: { instance_profile_credentials+: { port: port } } } },
        '#withRetries':: d.fn(help='', args=[d.arg(name='retries', type=d.T.string)]),
        withRetries(retries): { spec+: { s3+: { instance_profile_credentials+: { retries: retries } } } },
      },
      '#shared_credentials':: d.obj(help=''),
      shared_credentials: {
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { s3+: { shared_credentials+: { path: path } } } },
        '#withProfile_name':: d.fn(help='', args=[d.arg(name='profile_name', type=d.T.string)]),
        withProfile_name(profile_name): { spec+: { s3+: { shared_credentials+: { profile_name: profile_name } } } },
      },
      '#withAcl':: d.fn(help='', args=[d.arg(name='acl', type=d.T.string)]),
      withAcl(acl): { spec+: { s3+: { acl: acl } } },
      '#withAuto_create_bucket':: d.fn(help='', args=[d.arg(name='auto_create_bucket', type=d.T.string)]),
      withAuto_create_bucket(auto_create_bucket): { spec+: { s3+: { auto_create_bucket: auto_create_bucket } } },
      '#withAws_iam_retries':: d.fn(help='', args=[d.arg(name='aws_iam_retries', type=d.T.string)]),
      withAws_iam_retries(aws_iam_retries): { spec+: { s3+: { aws_iam_retries: aws_iam_retries } } },
      '#withCheck_apikey_on_start':: d.fn(help='', args=[d.arg(name='check_apikey_on_start', type=d.T.string)]),
      withCheck_apikey_on_start(check_apikey_on_start): { spec+: { s3+: { check_apikey_on_start: check_apikey_on_start } } },
      '#withCheck_bucket':: d.fn(help='', args=[d.arg(name='check_bucket', type=d.T.string)]),
      withCheck_bucket(check_bucket): { spec+: { s3+: { check_bucket: check_bucket } } },
      '#withCheck_object':: d.fn(help='', args=[d.arg(name='check_object', type=d.T.string)]),
      withCheck_object(check_object): { spec+: { s3+: { check_object: check_object } } },
      '#withClustername':: d.fn(help='', args=[d.arg(name='clustername', type=d.T.string)]),
      withClustername(clustername): { spec+: { s3+: { clustername: clustername } } },
      '#withCompute_checksums':: d.fn(help='', args=[d.arg(name='compute_checksums', type=d.T.string)]),
      withCompute_checksums(compute_checksums): { spec+: { s3+: { compute_checksums: compute_checksums } } },
      '#withEnable_transfer_acceleration':: d.fn(help='', args=[d.arg(name='enable_transfer_acceleration', type=d.T.string)]),
      withEnable_transfer_acceleration(enable_transfer_acceleration): { spec+: { s3+: { enable_transfer_acceleration: enable_transfer_acceleration } } },
      '#withForce_path_style':: d.fn(help='', args=[d.arg(name='force_path_style', type=d.T.string)]),
      withForce_path_style(force_path_style): { spec+: { s3+: { force_path_style: force_path_style } } },
      '#withGrant_full_control':: d.fn(help='', args=[d.arg(name='grant_full_control', type=d.T.string)]),
      withGrant_full_control(grant_full_control): { spec+: { s3+: { grant_full_control: grant_full_control } } },
      '#withGrant_read':: d.fn(help='', args=[d.arg(name='grant_read', type=d.T.string)]),
      withGrant_read(grant_read): { spec+: { s3+: { grant_read: grant_read } } },
      '#withGrant_read_acp':: d.fn(help='', args=[d.arg(name='grant_read_acp', type=d.T.string)]),
      withGrant_read_acp(grant_read_acp): { spec+: { s3+: { grant_read_acp: grant_read_acp } } },
      '#withGrant_write_acp':: d.fn(help='', args=[d.arg(name='grant_write_acp', type=d.T.string)]),
      withGrant_write_acp(grant_write_acp): { spec+: { s3+: { grant_write_acp: grant_write_acp } } },
      '#withHex_random_length':: d.fn(help='', args=[d.arg(name='hex_random_length', type=d.T.string)]),
      withHex_random_length(hex_random_length): { spec+: { s3+: { hex_random_length: hex_random_length } } },
      '#withIndex_format':: d.fn(help='', args=[d.arg(name='index_format', type=d.T.string)]),
      withIndex_format(index_format): { spec+: { s3+: { index_format: index_format } } },
      '#withOneeye_format':: d.fn(help='', args=[d.arg(name='oneeye_format', type=d.T.boolean)]),
      withOneeye_format(oneeye_format): { spec+: { s3+: { oneeye_format: oneeye_format } } },
      '#withOverwrite':: d.fn(help='', args=[d.arg(name='overwrite', type=d.T.string)]),
      withOverwrite(overwrite): { spec+: { s3+: { overwrite: overwrite } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { s3+: { path: path } } },
      '#withProxy_uri':: d.fn(help='', args=[d.arg(name='proxy_uri', type=d.T.string)]),
      withProxy_uri(proxy_uri): { spec+: { s3+: { proxy_uri: proxy_uri } } },
      '#withS3_bucket':: d.fn(help='', args=[d.arg(name='s3_bucket', type=d.T.string)]),
      withS3_bucket(s3_bucket): { spec+: { s3+: { s3_bucket: s3_bucket } } },
      '#withS3_endpoint':: d.fn(help='', args=[d.arg(name='s3_endpoint', type=d.T.string)]),
      withS3_endpoint(s3_endpoint): { spec+: { s3+: { s3_endpoint: s3_endpoint } } },
      '#withS3_metadata':: d.fn(help='', args=[d.arg(name='s3_metadata', type=d.T.string)]),
      withS3_metadata(s3_metadata): { spec+: { s3+: { s3_metadata: s3_metadata } } },
      '#withS3_object_key_format':: d.fn(help='', args=[d.arg(name='s3_object_key_format', type=d.T.string)]),
      withS3_object_key_format(s3_object_key_format): { spec+: { s3+: { s3_object_key_format: s3_object_key_format } } },
      '#withS3_region':: d.fn(help='', args=[d.arg(name='s3_region', type=d.T.string)]),
      withS3_region(s3_region): { spec+: { s3+: { s3_region: s3_region } } },
      '#withSignature_version':: d.fn(help='', args=[d.arg(name='signature_version', type=d.T.string)]),
      withSignature_version(signature_version): { spec+: { s3+: { signature_version: signature_version } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { s3+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSse_customer_algorithm':: d.fn(help='', args=[d.arg(name='sse_customer_algorithm', type=d.T.string)]),
      withSse_customer_algorithm(sse_customer_algorithm): { spec+: { s3+: { sse_customer_algorithm: sse_customer_algorithm } } },
      '#withSse_customer_key':: d.fn(help='', args=[d.arg(name='sse_customer_key', type=d.T.string)]),
      withSse_customer_key(sse_customer_key): { spec+: { s3+: { sse_customer_key: sse_customer_key } } },
      '#withSse_customer_key_md5':: d.fn(help='', args=[d.arg(name='sse_customer_key_md5', type=d.T.string)]),
      withSse_customer_key_md5(sse_customer_key_md5): { spec+: { s3+: { sse_customer_key_md5: sse_customer_key_md5 } } },
      '#withSsekms_key_id':: d.fn(help='', args=[d.arg(name='ssekms_key_id', type=d.T.string)]),
      withSsekms_key_id(ssekms_key_id): { spec+: { s3+: { ssekms_key_id: ssekms_key_id } } },
      '#withSsl_verify_peer':: d.fn(help='', args=[d.arg(name='ssl_verify_peer', type=d.T.string)]),
      withSsl_verify_peer(ssl_verify_peer): { spec+: { s3+: { ssl_verify_peer: ssl_verify_peer } } },
      '#withStorage_class':: d.fn(help='', args=[d.arg(name='storage_class', type=d.T.string)]),
      withStorage_class(storage_class): { spec+: { s3+: { storage_class: storage_class } } },
      '#withStore_as':: d.fn(help='', args=[d.arg(name='store_as', type=d.T.string)]),
      withStore_as(store_as): { spec+: { s3+: { store_as: store_as } } },
      '#withUse_bundled_cert':: d.fn(help='', args=[d.arg(name='use_bundled_cert', type=d.T.string)]),
      withUse_bundled_cert(use_bundled_cert): { spec+: { s3+: { use_bundled_cert: use_bundled_cert } } },
      '#withUse_server_side_encryption':: d.fn(help='', args=[d.arg(name='use_server_side_encryption', type=d.T.string)]),
      withUse_server_side_encryption(use_server_side_encryption): { spec+: { s3+: { use_server_side_encryption: use_server_side_encryption } } },
      '#withWarn_for_delay':: d.fn(help='', args=[d.arg(name='warn_for_delay', type=d.T.string)]),
      withWarn_for_delay(warn_for_delay): { spec+: { s3+: { warn_for_delay: warn_for_delay } } },
    },
    '#splunkHec':: d.obj(help=''),
    splunkHec: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { splunkHec+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { splunkHec+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { splunkHec+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { splunkHec+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { splunkHec+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { splunkHec+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { splunkHec+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { splunkHec+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { splunkHec+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { splunkHec+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { splunkHec+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { splunkHec+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { splunkHec+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { splunkHec+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { splunkHec+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { splunkHec+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { splunkHec+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { splunkHec+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { splunkHec+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { splunkHec+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { splunkHec+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { splunkHec+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { splunkHec+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { splunkHec+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { splunkHec+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { splunkHec+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { splunkHec+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { splunkHec+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { splunkHec+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { splunkHec+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { splunkHec+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { splunkHec+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { splunkHec+: { buffer+: { type: type } } } },
      },
      '#ca_file':: d.obj(help=''),
      ca_file: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { ca_file+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { ca_file+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { ca_file+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { ca_file+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { ca_file+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { ca_file+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { splunkHec+: { ca_file+: { value: value } } } },
      },
      '#ca_path':: d.obj(help=''),
      ca_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { ca_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { ca_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { ca_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { ca_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { ca_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { ca_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { splunkHec+: { ca_path+: { value: value } } } },
      },
      '#client_cert':: d.obj(help=''),
      client_cert: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { client_cert+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { client_cert+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { client_cert+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { client_cert+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { client_cert+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { client_cert+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { splunkHec+: { client_cert+: { value: value } } } },
      },
      '#client_key':: d.obj(help=''),
      client_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { client_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { client_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { client_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { client_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { client_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { client_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { splunkHec+: { client_key+: { value: value } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withAdd_newline':: d.fn(help='', args=[d.arg(name='add_newline', type=d.T.boolean)]),
        withAdd_newline(add_newline): { spec+: { splunkHec+: { format+: { add_newline: add_newline } } } },
        '#withMessage_key':: d.fn(help='', args=[d.arg(name='message_key', type=d.T.string)]),
        withMessage_key(message_key): { spec+: { splunkHec+: { format+: { message_key: message_key } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { splunkHec+: { format+: { type: type } } } },
      },
      '#hec_token':: d.obj(help=''),
      hec_token: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { hec_token+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { hec_token+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { hec_token+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { splunkHec+: { hec_token+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { splunkHec+: { hec_token+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { splunkHec+: { hec_token+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { splunkHec+: { hec_token+: { value: value } } } },
      },
      '#withCoerce_to_utf8':: d.fn(help='', args=[d.arg(name='coerce_to_utf8', type=d.T.boolean)]),
      withCoerce_to_utf8(coerce_to_utf8): { spec+: { splunkHec+: { coerce_to_utf8: coerce_to_utf8 } } },
      '#withData_type':: d.fn(help='', args=[d.arg(name='data_type', type=d.T.string)]),
      withData_type(data_type): { spec+: { splunkHec+: { data_type: data_type } } },
      '#withFields':: d.fn(help='', args=[d.arg(name='fields', type=d.T.object)]),
      withFields(fields): { spec+: { splunkHec+: { fields: fields } } },
      '#withFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fields', type=d.T.object)]),
      withFieldsMixin(fields): { spec+: { splunkHec+: { fields+: fields } } },
      '#withHec_host':: d.fn(help='', args=[d.arg(name='hec_host', type=d.T.string)]),
      withHec_host(hec_host): { spec+: { splunkHec+: { hec_host: hec_host } } },
      '#withHec_port':: d.fn(help='', args=[d.arg(name='hec_port', type=d.T.integer)]),
      withHec_port(hec_port): { spec+: { splunkHec+: { hec_port: hec_port } } },
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { splunkHec+: { host: host } } },
      '#withHost_key':: d.fn(help='', args=[d.arg(name='host_key', type=d.T.string)]),
      withHost_key(host_key): { spec+: { splunkHec+: { host_key: host_key } } },
      '#withIdle_timeout':: d.fn(help='', args=[d.arg(name='idle_timeout', type=d.T.integer)]),
      withIdle_timeout(idle_timeout): { spec+: { splunkHec+: { idle_timeout: idle_timeout } } },
      '#withIndex':: d.fn(help='', args=[d.arg(name='index', type=d.T.string)]),
      withIndex(index): { spec+: { splunkHec+: { index: index } } },
      '#withIndex_key':: d.fn(help='', args=[d.arg(name='index_key', type=d.T.string)]),
      withIndex_key(index_key): { spec+: { splunkHec+: { index_key: index_key } } },
      '#withInsecure_ssl':: d.fn(help='', args=[d.arg(name='insecure_ssl', type=d.T.boolean)]),
      withInsecure_ssl(insecure_ssl): { spec+: { splunkHec+: { insecure_ssl: insecure_ssl } } },
      '#withKeep_keys':: d.fn(help='', args=[d.arg(name='keep_keys', type=d.T.boolean)]),
      withKeep_keys(keep_keys): { spec+: { splunkHec+: { keep_keys: keep_keys } } },
      '#withMetric_name_key':: d.fn(help='', args=[d.arg(name='metric_name_key', type=d.T.string)]),
      withMetric_name_key(metric_name_key): { spec+: { splunkHec+: { metric_name_key: metric_name_key } } },
      '#withMetric_value_key':: d.fn(help='', args=[d.arg(name='metric_value_key', type=d.T.string)]),
      withMetric_value_key(metric_value_key): { spec+: { splunkHec+: { metric_value_key: metric_value_key } } },
      '#withMetrics_from_event':: d.fn(help='', args=[d.arg(name='metrics_from_event', type=d.T.boolean)]),
      withMetrics_from_event(metrics_from_event): { spec+: { splunkHec+: { metrics_from_event: metrics_from_event } } },
      '#withNon_utf8_replacement_string':: d.fn(help='', args=[d.arg(name='non_utf8_replacement_string', type=d.T.string)]),
      withNon_utf8_replacement_string(non_utf8_replacement_string): { spec+: { splunkHec+: { non_utf8_replacement_string: non_utf8_replacement_string } } },
      '#withOpen_timeout':: d.fn(help='', args=[d.arg(name='open_timeout', type=d.T.integer)]),
      withOpen_timeout(open_timeout): { spec+: { splunkHec+: { open_timeout: open_timeout } } },
      '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
      withProtocol(protocol): { spec+: { splunkHec+: { protocol: protocol } } },
      '#withRead_timeout':: d.fn(help='', args=[d.arg(name='read_timeout', type=d.T.integer)]),
      withRead_timeout(read_timeout): { spec+: { splunkHec+: { read_timeout: read_timeout } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { splunkHec+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSource':: d.fn(help='', args=[d.arg(name='source', type=d.T.string)]),
      withSource(source): { spec+: { splunkHec+: { source: source } } },
      '#withSource_key':: d.fn(help='', args=[d.arg(name='source_key', type=d.T.string)]),
      withSource_key(source_key): { spec+: { splunkHec+: { source_key: source_key } } },
      '#withSourcetype':: d.fn(help='', args=[d.arg(name='sourcetype', type=d.T.string)]),
      withSourcetype(sourcetype): { spec+: { splunkHec+: { sourcetype: sourcetype } } },
      '#withSourcetype_key':: d.fn(help='', args=[d.arg(name='sourcetype_key', type=d.T.string)]),
      withSourcetype_key(sourcetype_key): { spec+: { splunkHec+: { sourcetype_key: sourcetype_key } } },
      '#withSsl_ciphers':: d.fn(help='', args=[d.arg(name='ssl_ciphers', type=d.T.string)]),
      withSsl_ciphers(ssl_ciphers): { spec+: { splunkHec+: { ssl_ciphers: ssl_ciphers } } },
    },
    '#sqs':: d.obj(help=''),
    sqs: {
      '#aws_key_id':: d.obj(help=''),
      aws_key_id: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { sqs+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { sqs+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { sqs+: { aws_key_id+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { sqs+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { sqs+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { sqs+: { aws_key_id+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { sqs+: { aws_key_id+: { value: value } } } },
      },
      '#aws_sec_key':: d.obj(help=''),
      aws_sec_key: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { sqs+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { sqs+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { sqs+: { aws_sec_key+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { sqs+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { sqs+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { sqs+: { aws_sec_key+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { sqs+: { aws_sec_key+: { value: value } } } },
      },
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { sqs+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { sqs+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { sqs+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { sqs+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { sqs+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { sqs+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { sqs+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { sqs+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { sqs+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { sqs+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { sqs+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { sqs+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { sqs+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { sqs+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { sqs+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { sqs+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { sqs+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { sqs+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { sqs+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { sqs+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { sqs+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { sqs+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { sqs+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { sqs+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { sqs+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { sqs+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { sqs+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { sqs+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { sqs+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { sqs+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { sqs+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { sqs+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { sqs+: { buffer+: { type: type } } } },
      },
      '#withCreate_queue':: d.fn(help='', args=[d.arg(name='create_queue', type=d.T.boolean)]),
      withCreate_queue(create_queue): { spec+: { sqs+: { create_queue: create_queue } } },
      '#withDelay_seconds':: d.fn(help='', args=[d.arg(name='delay_seconds', type=d.T.integer)]),
      withDelay_seconds(delay_seconds): { spec+: { sqs+: { delay_seconds: delay_seconds } } },
      '#withInclude_tag':: d.fn(help='', args=[d.arg(name='include_tag', type=d.T.boolean)]),
      withInclude_tag(include_tag): { spec+: { sqs+: { include_tag: include_tag } } },
      '#withMessage_group_id':: d.fn(help='', args=[d.arg(name='message_group_id', type=d.T.string)]),
      withMessage_group_id(message_group_id): { spec+: { sqs+: { message_group_id: message_group_id } } },
      '#withQueue_name':: d.fn(help='', args=[d.arg(name='queue_name', type=d.T.string)]),
      withQueue_name(queue_name): { spec+: { sqs+: { queue_name: queue_name } } },
      '#withRegion':: d.fn(help='', args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { spec+: { sqs+: { region: region } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { sqs+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSqs_url':: d.fn(help='', args=[d.arg(name='sqs_url', type=d.T.string)]),
      withSqs_url(sqs_url): { spec+: { sqs+: { sqs_url: sqs_url } } },
      '#withTag_property_name':: d.fn(help='', args=[d.arg(name='tag_property_name', type=d.T.string)]),
      withTag_property_name(tag_property_name): { spec+: { sqs+: { tag_property_name: tag_property_name } } },
    },
    '#sumologic':: d.obj(help=''),
    sumologic: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { sumologic+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { sumologic+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { sumologic+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { sumologic+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { sumologic+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { sumologic+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { sumologic+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { sumologic+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { sumologic+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { sumologic+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { sumologic+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { sumologic+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { sumologic+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { sumologic+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { sumologic+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { sumologic+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { sumologic+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { sumologic+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { sumologic+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { sumologic+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { sumologic+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { sumologic+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { sumologic+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { sumologic+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { sumologic+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { sumologic+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { sumologic+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { sumologic+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { sumologic+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { sumologic+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { sumologic+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { sumologic+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { sumologic+: { buffer+: { type: type } } } },
      },
      '#endpoint':: d.obj(help=''),
      endpoint: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { sumologic+: { endpoint+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { sumologic+: { endpoint+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { sumologic+: { endpoint+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { sumologic+: { endpoint+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { sumologic+: { endpoint+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { sumologic+: { endpoint+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { sumologic+: { endpoint+: { value: value } } } },
      },
      '#withAdd_timestamp':: d.fn(help='', args=[d.arg(name='add_timestamp', type=d.T.boolean)]),
      withAdd_timestamp(add_timestamp): { spec+: { sumologic+: { add_timestamp: add_timestamp } } },
      '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.boolean)]),
      withCompress(compress): { spec+: { sumologic+: { compress: compress } } },
      '#withCompress_encoding':: d.fn(help='', args=[d.arg(name='compress_encoding', type=d.T.string)]),
      withCompress_encoding(compress_encoding): { spec+: { sumologic+: { compress_encoding: compress_encoding } } },
      '#withCustom_dimensions':: d.fn(help='', args=[d.arg(name='custom_dimensions', type=d.T.string)]),
      withCustom_dimensions(custom_dimensions): { spec+: { sumologic+: { custom_dimensions: custom_dimensions } } },
      '#withCustom_fields':: d.fn(help='', args=[d.arg(name='custom_fields', type=d.T.array)]),
      withCustom_fields(custom_fields): { spec+: { sumologic+: { custom_fields: if std.isArray(v=custom_fields) then custom_fields else [custom_fields] } } },
      '#withCustom_fieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='custom_fields', type=d.T.array)]),
      withCustom_fieldsMixin(custom_fields): { spec+: { sumologic+: { custom_fields+: if std.isArray(v=custom_fields) then custom_fields else [custom_fields] } } },
      '#withData_type':: d.fn(help='', args=[d.arg(name='data_type', type=d.T.string)]),
      withData_type(data_type): { spec+: { sumologic+: { data_type: data_type } } },
      '#withDelimiter':: d.fn(help='', args=[d.arg(name='delimiter', type=d.T.string)]),
      withDelimiter(delimiter): { spec+: { sumologic+: { delimiter: delimiter } } },
      '#withDisable_cookies':: d.fn(help='', args=[d.arg(name='disable_cookies', type=d.T.boolean)]),
      withDisable_cookies(disable_cookies): { spec+: { sumologic+: { disable_cookies: disable_cookies } } },
      '#withLog_format':: d.fn(help='', args=[d.arg(name='log_format', type=d.T.string)]),
      withLog_format(log_format): { spec+: { sumologic+: { log_format: log_format } } },
      '#withLog_key':: d.fn(help='', args=[d.arg(name='log_key', type=d.T.string)]),
      withLog_key(log_key): { spec+: { sumologic+: { log_key: log_key } } },
      '#withMetric_data_format':: d.fn(help='', args=[d.arg(name='metric_data_format', type=d.T.string)]),
      withMetric_data_format(metric_data_format): { spec+: { sumologic+: { metric_data_format: metric_data_format } } },
      '#withOpen_timeout':: d.fn(help='', args=[d.arg(name='open_timeout', type=d.T.integer)]),
      withOpen_timeout(open_timeout): { spec+: { sumologic+: { open_timeout: open_timeout } } },
      '#withProxy_uri':: d.fn(help='', args=[d.arg(name='proxy_uri', type=d.T.string)]),
      withProxy_uri(proxy_uri): { spec+: { sumologic+: { proxy_uri: proxy_uri } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { sumologic+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withSource_category':: d.fn(help='', args=[d.arg(name='source_category', type=d.T.string)]),
      withSource_category(source_category): { spec+: { sumologic+: { source_category: source_category } } },
      '#withSource_host':: d.fn(help='', args=[d.arg(name='source_host', type=d.T.string)]),
      withSource_host(source_host): { spec+: { sumologic+: { source_host: source_host } } },
      '#withSource_name':: d.fn(help='', args=[d.arg(name='source_name', type=d.T.string)]),
      withSource_name(source_name): { spec+: { sumologic+: { source_name: source_name } } },
      '#withSource_name_key':: d.fn(help='', args=[d.arg(name='source_name_key', type=d.T.string)]),
      withSource_name_key(source_name_key): { spec+: { sumologic+: { source_name_key: source_name_key } } },
      '#withSumo_client':: d.fn(help='', args=[d.arg(name='sumo_client', type=d.T.string)]),
      withSumo_client(sumo_client): { spec+: { sumologic+: { sumo_client: sumo_client } } },
      '#withTimestamp_key':: d.fn(help='', args=[d.arg(name='timestamp_key', type=d.T.string)]),
      withTimestamp_key(timestamp_key): { spec+: { sumologic+: { timestamp_key: timestamp_key } } },
      '#withVerify_ssl':: d.fn(help='', args=[d.arg(name='verify_ssl', type=d.T.boolean)]),
      withVerify_ssl(verify_ssl): { spec+: { sumologic+: { verify_ssl: verify_ssl } } },
    },
    '#syslog':: d.obj(help=''),
    syslog: {
      '#buffer':: d.obj(help=''),
      buffer: {
        '#withChunk_full_threshold':: d.fn(help='', args=[d.arg(name='chunk_full_threshold', type=d.T.string)]),
        withChunk_full_threshold(chunk_full_threshold): { spec+: { syslog+: { buffer+: { chunk_full_threshold: chunk_full_threshold } } } },
        '#withChunk_limit_records':: d.fn(help='', args=[d.arg(name='chunk_limit_records', type=d.T.integer)]),
        withChunk_limit_records(chunk_limit_records): { spec+: { syslog+: { buffer+: { chunk_limit_records: chunk_limit_records } } } },
        '#withChunk_limit_size':: d.fn(help='', args=[d.arg(name='chunk_limit_size', type=d.T.string)]),
        withChunk_limit_size(chunk_limit_size): { spec+: { syslog+: { buffer+: { chunk_limit_size: chunk_limit_size } } } },
        '#withCompress':: d.fn(help='', args=[d.arg(name='compress', type=d.T.string)]),
        withCompress(compress): { spec+: { syslog+: { buffer+: { compress: compress } } } },
        '#withDelayed_commit_timeout':: d.fn(help='', args=[d.arg(name='delayed_commit_timeout', type=d.T.string)]),
        withDelayed_commit_timeout(delayed_commit_timeout): { spec+: { syslog+: { buffer+: { delayed_commit_timeout: delayed_commit_timeout } } } },
        '#withDisable_chunk_backup':: d.fn(help='', args=[d.arg(name='disable_chunk_backup', type=d.T.boolean)]),
        withDisable_chunk_backup(disable_chunk_backup): { spec+: { syslog+: { buffer+: { disable_chunk_backup: disable_chunk_backup } } } },
        '#withDisabled':: d.fn(help='', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { spec+: { syslog+: { buffer+: { disabled: disabled } } } },
        '#withFlush_at_shutdown':: d.fn(help='', args=[d.arg(name='flush_at_shutdown', type=d.T.boolean)]),
        withFlush_at_shutdown(flush_at_shutdown): { spec+: { syslog+: { buffer+: { flush_at_shutdown: flush_at_shutdown } } } },
        '#withFlush_interval':: d.fn(help='', args=[d.arg(name='flush_interval', type=d.T.string)]),
        withFlush_interval(flush_interval): { spec+: { syslog+: { buffer+: { flush_interval: flush_interval } } } },
        '#withFlush_mode':: d.fn(help='', args=[d.arg(name='flush_mode', type=d.T.string)]),
        withFlush_mode(flush_mode): { spec+: { syslog+: { buffer+: { flush_mode: flush_mode } } } },
        '#withFlush_thread_burst_interval':: d.fn(help='', args=[d.arg(name='flush_thread_burst_interval', type=d.T.string)]),
        withFlush_thread_burst_interval(flush_thread_burst_interval): { spec+: { syslog+: { buffer+: { flush_thread_burst_interval: flush_thread_burst_interval } } } },
        '#withFlush_thread_count':: d.fn(help='', args=[d.arg(name='flush_thread_count', type=d.T.integer)]),
        withFlush_thread_count(flush_thread_count): { spec+: { syslog+: { buffer+: { flush_thread_count: flush_thread_count } } } },
        '#withFlush_thread_interval':: d.fn(help='', args=[d.arg(name='flush_thread_interval', type=d.T.string)]),
        withFlush_thread_interval(flush_thread_interval): { spec+: { syslog+: { buffer+: { flush_thread_interval: flush_thread_interval } } } },
        '#withOverflow_action':: d.fn(help='', args=[d.arg(name='overflow_action', type=d.T.string)]),
        withOverflow_action(overflow_action): { spec+: { syslog+: { buffer+: { overflow_action: overflow_action } } } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { spec+: { syslog+: { buffer+: { path: path } } } },
        '#withQueue_limit_length':: d.fn(help='', args=[d.arg(name='queue_limit_length', type=d.T.integer)]),
        withQueue_limit_length(queue_limit_length): { spec+: { syslog+: { buffer+: { queue_limit_length: queue_limit_length } } } },
        '#withQueued_chunks_limit_size':: d.fn(help='', args=[d.arg(name='queued_chunks_limit_size', type=d.T.integer)]),
        withQueued_chunks_limit_size(queued_chunks_limit_size): { spec+: { syslog+: { buffer+: { queued_chunks_limit_size: queued_chunks_limit_size } } } },
        '#withRetry_exponential_backoff_base':: d.fn(help='', args=[d.arg(name='retry_exponential_backoff_base', type=d.T.string)]),
        withRetry_exponential_backoff_base(retry_exponential_backoff_base): { spec+: { syslog+: { buffer+: { retry_exponential_backoff_base: retry_exponential_backoff_base } } } },
        '#withRetry_forever':: d.fn(help='', args=[d.arg(name='retry_forever', type=d.T.boolean)]),
        withRetry_forever(retry_forever): { spec+: { syslog+: { buffer+: { retry_forever: retry_forever } } } },
        '#withRetry_max_interval':: d.fn(help='', args=[d.arg(name='retry_max_interval', type=d.T.string)]),
        withRetry_max_interval(retry_max_interval): { spec+: { syslog+: { buffer+: { retry_max_interval: retry_max_interval } } } },
        '#withRetry_max_times':: d.fn(help='', args=[d.arg(name='retry_max_times', type=d.T.integer)]),
        withRetry_max_times(retry_max_times): { spec+: { syslog+: { buffer+: { retry_max_times: retry_max_times } } } },
        '#withRetry_randomize':: d.fn(help='', args=[d.arg(name='retry_randomize', type=d.T.boolean)]),
        withRetry_randomize(retry_randomize): { spec+: { syslog+: { buffer+: { retry_randomize: retry_randomize } } } },
        '#withRetry_secondary_threshold':: d.fn(help='', args=[d.arg(name='retry_secondary_threshold', type=d.T.string)]),
        withRetry_secondary_threshold(retry_secondary_threshold): { spec+: { syslog+: { buffer+: { retry_secondary_threshold: retry_secondary_threshold } } } },
        '#withRetry_timeout':: d.fn(help='', args=[d.arg(name='retry_timeout', type=d.T.string)]),
        withRetry_timeout(retry_timeout): { spec+: { syslog+: { buffer+: { retry_timeout: retry_timeout } } } },
        '#withRetry_type':: d.fn(help='', args=[d.arg(name='retry_type', type=d.T.string)]),
        withRetry_type(retry_type): { spec+: { syslog+: { buffer+: { retry_type: retry_type } } } },
        '#withRetry_wait':: d.fn(help='', args=[d.arg(name='retry_wait', type=d.T.string)]),
        withRetry_wait(retry_wait): { spec+: { syslog+: { buffer+: { retry_wait: retry_wait } } } },
        '#withTags':: d.fn(help='', args=[d.arg(name='tags', type=d.T.string)]),
        withTags(tags): { spec+: { syslog+: { buffer+: { tags: tags } } } },
        '#withTimekey':: d.fn(help='', args=[d.arg(name='timekey', type=d.T.string)]),
        withTimekey(timekey): { spec+: { syslog+: { buffer+: { timekey: timekey } } } },
        '#withTimekey_use_utc':: d.fn(help='', args=[d.arg(name='timekey_use_utc', type=d.T.boolean)]),
        withTimekey_use_utc(timekey_use_utc): { spec+: { syslog+: { buffer+: { timekey_use_utc: timekey_use_utc } } } },
        '#withTimekey_wait':: d.fn(help='', args=[d.arg(name='timekey_wait', type=d.T.string)]),
        withTimekey_wait(timekey_wait): { spec+: { syslog+: { buffer+: { timekey_wait: timekey_wait } } } },
        '#withTimekey_zone':: d.fn(help='', args=[d.arg(name='timekey_zone', type=d.T.string)]),
        withTimekey_zone(timekey_zone): { spec+: { syslog+: { buffer+: { timekey_zone: timekey_zone } } } },
        '#withTotal_limit_size':: d.fn(help='', args=[d.arg(name='total_limit_size', type=d.T.string)]),
        withTotal_limit_size(total_limit_size): { spec+: { syslog+: { buffer+: { total_limit_size: total_limit_size } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { syslog+: { buffer+: { type: type } } } },
      },
      '#client_cert_path':: d.obj(help=''),
      client_cert_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { client_cert_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { client_cert_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { client_cert_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { client_cert_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { client_cert_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { client_cert_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { syslog+: { client_cert_path+: { value: value } } } },
      },
      '#format':: d.obj(help=''),
      format: {
        '#withApp_name_field':: d.fn(help='', args=[d.arg(name='app_name_field', type=d.T.string)]),
        withApp_name_field(app_name_field): { spec+: { syslog+: { format+: { app_name_field: app_name_field } } } },
        '#withHostname_field':: d.fn(help='', args=[d.arg(name='hostname_field', type=d.T.string)]),
        withHostname_field(hostname_field): { spec+: { syslog+: { format+: { hostname_field: hostname_field } } } },
        '#withLog_field':: d.fn(help='', args=[d.arg(name='log_field', type=d.T.string)]),
        withLog_field(log_field): { spec+: { syslog+: { format+: { log_field: log_field } } } },
        '#withMessage_id_field':: d.fn(help='', args=[d.arg(name='message_id_field', type=d.T.string)]),
        withMessage_id_field(message_id_field): { spec+: { syslog+: { format+: { message_id_field: message_id_field } } } },
        '#withProc_id_field':: d.fn(help='', args=[d.arg(name='proc_id_field', type=d.T.string)]),
        withProc_id_field(proc_id_field): { spec+: { syslog+: { format+: { proc_id_field: proc_id_field } } } },
        '#withRfc6587_message_size':: d.fn(help='', args=[d.arg(name='rfc6587_message_size', type=d.T.boolean)]),
        withRfc6587_message_size(rfc6587_message_size): { spec+: { syslog+: { format+: { rfc6587_message_size: rfc6587_message_size } } } },
        '#withStructured_data_field':: d.fn(help='', args=[d.arg(name='structured_data_field', type=d.T.string)]),
        withStructured_data_field(structured_data_field): { spec+: { syslog+: { format+: { structured_data_field: structured_data_field } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { syslog+: { format+: { type: type } } } },
      },
      '#private_key_passphrase':: d.obj(help=''),
      private_key_passphrase: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { private_key_passphrase+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { private_key_passphrase+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { private_key_passphrase+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { private_key_passphrase+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { private_key_passphrase+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { private_key_passphrase+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { syslog+: { private_key_passphrase+: { value: value } } } },
      },
      '#private_key_path':: d.obj(help=''),
      private_key_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { private_key_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { private_key_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { private_key_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { private_key_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { private_key_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { private_key_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { syslog+: { private_key_path+: { value: value } } } },
      },
      '#trusted_ca_path':: d.obj(help=''),
      trusted_ca_path: {
        '#mountFrom':: d.obj(help=''),
        mountFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { trusted_ca_path+: { mountFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { trusted_ca_path+: { mountFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { trusted_ca_path+: { mountFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { syslog+: { trusted_ca_path+: { valueFrom+: { secretKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { syslog+: { trusted_ca_path+: { valueFrom+: { secretKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { syslog+: { trusted_ca_path+: { valueFrom+: { secretKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { spec+: { syslog+: { trusted_ca_path+: { value: value } } } },
      },
      '#withAllow_self_signed_cert':: d.fn(help='', args=[d.arg(name='allow_self_signed_cert', type=d.T.boolean)]),
      withAllow_self_signed_cert(allow_self_signed_cert): { spec+: { syslog+: { allow_self_signed_cert: allow_self_signed_cert } } },
      '#withEnable_system_cert_store':: d.fn(help='', args=[d.arg(name='enable_system_cert_store', type=d.T.boolean)]),
      withEnable_system_cert_store(enable_system_cert_store): { spec+: { syslog+: { enable_system_cert_store: enable_system_cert_store } } },
      '#withFqdn':: d.fn(help='', args=[d.arg(name='fqdn', type=d.T.string)]),
      withFqdn(fqdn): { spec+: { syslog+: { fqdn: fqdn } } },
      '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
      withHost(host): { spec+: { syslog+: { host: host } } },
      '#withInsecure':: d.fn(help='', args=[d.arg(name='insecure', type=d.T.boolean)]),
      withInsecure(insecure): { spec+: { syslog+: { insecure: insecure } } },
      '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { syslog+: { port: port } } },
      '#withSlow_flush_log_threshold':: d.fn(help='', args=[d.arg(name='slow_flush_log_threshold', type=d.T.string)]),
      withSlow_flush_log_threshold(slow_flush_log_threshold): { spec+: { syslog+: { slow_flush_log_threshold: slow_flush_log_threshold } } },
      '#withTransport':: d.fn(help='', args=[d.arg(name='transport', type=d.T.string)]),
      withTransport(transport): { spec+: { syslog+: { transport: transport } } },
      '#withVerify_fqdn':: d.fn(help='', args=[d.arg(name='verify_fqdn', type=d.T.boolean)]),
      withVerify_fqdn(verify_fqdn): { spec+: { syslog+: { verify_fqdn: verify_fqdn } } },
      '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
      withVersion(version): { spec+: { syslog+: { version: version } } },
    },
    '#withEnabledNamespaces':: d.fn(help='', args=[d.arg(name='enabledNamespaces', type=d.T.array)]),
    withEnabledNamespaces(enabledNamespaces): { spec+: { enabledNamespaces: if std.isArray(v=enabledNamespaces) then enabledNamespaces else [enabledNamespaces] } },
    '#withEnabledNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='enabledNamespaces', type=d.T.array)]),
    withEnabledNamespacesMixin(enabledNamespaces): { spec+: { enabledNamespaces+: if std.isArray(v=enabledNamespaces) then enabledNamespaces else [enabledNamespaces] } },
    '#withLoggingRef':: d.fn(help='', args=[d.arg(name='loggingRef', type=d.T.string)]),
    withLoggingRef(loggingRef): { spec+: { loggingRef: loggingRef } },
    '#withNullout':: d.fn(help='', args=[d.arg(name='nullout', type=d.T.object)]),
    withNullout(nullout): { spec+: { nullout: nullout } },
    '#withNulloutMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nullout', type=d.T.object)]),
    withNulloutMixin(nullout): { spec+: { nullout+: nullout } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
